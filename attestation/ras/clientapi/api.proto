syntax = "proto3";

option go_package = "gitee.com/openeuler/kunpengsecl/attestation/ras/clientapi";

service Ras {
  rpc GenerateEKCert (GenerateEKCertRequest) returns (GenerateEKCertReply) {}
  rpc GenerateIKCert (GenerateIKCertRequest) returns (GenerateIKCertReply) {}
  rpc RegisterClient (RegisterClientRequest) returns (RegisterClientReply) {}
  rpc UnregisterClient (UnregisterClientRequest) returns (UnregisterClientReply) {}
  rpc SendHeartbeat (SendHeartbeatRequest) returns (SendHeartbeatReply) {}
  rpc SendReport (SendReportRequest) returns (SendReportReply) {}

  rpc SendKCMPubKeyCert (SendKCMPubKeyCertRequest) returns (SendKCMPubKeyCertReply) {}
  rpc VerifyKTAPubKeyCert (VerifyKTAPubKeyCertRequest) returns (VerifyKTAPubKeyCertReply) {}
  rpc KeyOperation (KeyOperationRequest) returns (KeyOperationReply) {}
}

message GenerateEKCertRequest {
  bytes ekPub = 1;
}

message GenerateEKCertReply {
  bytes ekCert = 1;
}

message GenerateIKCertRequest {
  bytes ekCert = 1;
  bytes ikPub  = 2;
  bytes ikName = 3;
}

message GenerateIKCertReply {
  bytes encryptedIC = 1;
  bytes credBlob = 2;
  bytes encryptedSecret = 3;
  string encryptAlg = 4;
  bytes encryptParam = 5;
}

message RegisterClientRequest {
  bytes cert = 1;
  string clientInfo = 2;
}

message RegisterClientReply {
  int64 clientId = 1;
  ClientConfig clientConfig = 2;
}

message ClientConfig {
  int64 hbDurationSeconds = 1;
  int64 trustDurationSeconds = 2;
  uint64 nonce = 3;
  string digestAlgorithm = 4;
}

message UnregisterClientRequest {
  int64 clientId = 1;
}

message UnregisterClientReply {
  bool result = 1;
}

message SendHeartbeatRequest {
  int64 clientId = 1;
}

message SendHeartbeatReply {
  uint64 nextAction = 1;
  ClientConfig clientConfig = 3;
}

message SendReportRequest {
  int64 clientId = 1;
  uint64 nonce = 2;
  string clientInfo = 3;
  bytes quoted = 4;
  bytes signature = 5;
  repeated Manifest manifests = 6;
  map<string,bytes> taReports = 7;
}

message Manifest{
  string key = 1;
  bytes value = 2;
}

message SendReportReply {
  bool result = 1;
}

message SendKCMPubKeyCertRequest {

}

message SendKCMPubKeyCertReply {
  bool result = 1;
  bytes kcmPubKeyCert = 2;
}

message VerifyKTAPubKeyCertRequest {
  int64 clientId = 1;
  bytes ktaPubKeyCert = 2;
}

message VerifyKTAPubKeyCertReply {
  bool result = 1;
}

message KeyOperationRequest {
  int64 clientId = 1;
  bytes encMessage = 2;
}

message KeyOperationReply {
  bool result = 1;
  bytes encRetMessage = 2;
}