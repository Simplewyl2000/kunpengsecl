package clientapi

import (
	context "context"
	"crypto/aes"
	"crypto/cipher"
	rands "crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"crypto/x509/pkix"
	"encoding/json"
	"encoding/pem"
	"io/ioutil"
	"math/big"
	"net"
	"os"
	"testing"
	"time"

	"gitee.com/openeuler/kunpengsecl/attestation/common/cryptotools"
	"gitee.com/openeuler/kunpengsecl/attestation/ras/config"
	"gitee.com/openeuler/kunpengsecl/attestation/ras/trustmgr"
)

const (
	EKpubPEM = `
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjNq/p49Xwi8UTqq+e+wr
nsXeDfHJjVrtjmAJZvIgrkuYkItllkIINnjPYxKll56kuYVQZoKmQYDMNXN4zWON
BQEko2azkwBdZnkkyFefTpfLY3t6njmO0go318vvrZ2EuPCOBAtWQ1YuxbdD0f+C
haCjLbpGAJJwfpvQnLWLriYstxISEMUoeY6j5XYl4rR84Y3EvNsTDTK/omnUUWUF
TLa9wCAmgcwTZQXakgvsyv/+v1c4yU3rxgn71XqhzYMK3wwzYzxUp5GEg9I5u6Vd
+F5Uys+gK4X5pByIIYwyc/HJYr7yYLTWIeN8Ovg+XOLq/X33CpwNXvf3LMoJCjBH
JwIDAQAB
-----END PUBLIC KEY-----`
	IKpubPEM = `
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn8CYQqdaTdMxnKp248Fb
UZhxmpSTbb5CA/wUQQ0ARzr0eV3VwzKUhf8mPzkZQDTh36MzGxviBOpk922Gq3Ou
g1OXZ2LG2FPelqQRMvdWY3P/ITzKCoJ+DxlSDAt2zNuXRPnn/TyhXLx8UIAf5Vsx
OjvRxfV/z4r7zcOf33FdI8SuLV3YpNo/pOTJwqv/egV0kxtHDmqI3Vus+KSRjg6g
mlFex7A5TP8axDyLz0nPYP7XLbx1xNQ58VE8Oe51k7qwv8TOE03FVkWkSY25OEH1
2fSx1FasGAEVXVeEugz2W49rLXH4g8DMQ46Q6340J/+oS7+zT1Z0wNDGkqyQD1st
FQIDAQAB
-----END PUBLIC KEY-----`
)

const serverConfig = `
database:
  host: localhost
  name: kunpengsecl
  password: postgres
  port: 5432
  user: postgres
log:
  file: ./logs/ras-log.txt
racconfig:
  digestalgorithm: sha1
  hbduration: 10s
  trustduration: 2m0s
rasconfig:
  authkeyfile: ./ecdsakey.pub
  pcakeycertfile: ""
  pcaprivkeyfile: ""
  restport: 127.0.0.1:40002
  rootkeycertfile: ""
  rootprivkeyfile: ""
  mgrstrategy: "auto"
  serialnumber: 0
  serverport: 127.0.0.1:40001
  onlineduration: 30s
  basevalue-extract-rules:
    manifest:
    - name:
      - 8-0
      - 80000008-1
      type: bios
    - name:
      - boot_aggregate
      - /etc/modprobe.d/tuned.conf
      type: ima
    pcrinfo:
      pcrselection:
      - 1
      - 2
      - 3
      - 4
`
const (
	configFilePath = "./config.yaml"
	BIOSLogPath    = "../../rac/cmd/raagent/binary_bios_measurements"
	IMALogPath     = "../../rac/cmd/raagent/ascii_runtime_measurements"
)
const (
	kcmCert = `
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2 (0x2)
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=CN, ST=Shanghai, L=Shanghai, O=Huawei, CN=ca
        Validity
            Not Before: Dec  4 03:58:43 2022 GMT
            Not After : Nov 25 03:58:43 2023 GMT
        Subject: C=CN, ST=Shanghai, L=Shanghai, O=Huawei, CN=kcm
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:c1:22:5f:00:6f:f8:d6:03:83:85:1a:5c:54:35:
                    68:7b:a5:63:c5:cf:be:bb:e4:fa:f1:fa:61:ce:9f:
                    49:9f:9f:00:9b:e3:b5:0d:d0:74:1a:99:c0:74:54:
                    1d:da:4c:a1:be:eb:40:2b:93:65:bc:2e:84:71:3c:
                    b4:ce:a1:97:2d:f8:0e:98:37:10:46:d3:a7:f7:f5:
                    b7:2d:bf:8f:4c:af:13:80:8e:60:97:7b:41:52:8b:
                    c9:e7:af:7a:ff:d3:0f:6a:5f:f8:91:45:f8:f6:11:
                    13:78:c8:a7:56:3b:e0:2b:7b:0a:6e:e7:a5:de:49:
                    fe:16:51:dd:dc:49:6b:1b:7a:77:fe:36:f4:48:29:
                    27:25:77:b7:1d:0e:0e:f5:d0:4d:5c:08:93:e2:a3:
                    14:42:84:b9:f0:6b:3f:d1:f7:8a:80:82:ee:35:c4:
                    e1:1c:71:63:18:d5:6e:8a:b9:31:7a:f5:68:a7:3b:
                    2e:d0:47:14:e1:f3:77:a2:1e:1f:89:51:27:f1:6b:
                    d6:82:18:e2:39:9b:09:e0:65:e2:d5:8a:5c:46:d9:
                    0e:c1:14:64:41:76:61:62:a7:6a:d5:d1:4e:1c:a8:
                    b3:1f:27:a9:df:f4:a1:63:75:5e:0b:0d:a4:db:d1:
                    dc:e8:ea:57:90:17:63:85:8f:ec:5c:03:1e:c5:f3:
                    76:5f
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints:
                CA:FALSE
            Netscape Comment:
                OpenSSL Generated Certificate
            X509v3 Subject Key Identifier:
                19:30:D5:39:CC:12:8A:17:B3:E6:C0:DE:D9:DA:2C:B7:58:82:2C:EB
            X509v3 Authority Key Identifier:
                keyid:86:7D:03:08:1E:38:92:97:A5:CB:A6:96:6F:6E:DB:BC:A4:E0:67:0A

	Signature Algorithm: sha256WithRSAEncryption
		5a:d6:87:1c:7d:19:35:ab:b6:d2:0a:c6:28:de:d2:99:e9:1e:
		c0:92:58:33:79:42:77:0d:90:20:3c:ea:96:4c:85:04:e3:f0:
		f1:e1:0d:dc:20:fa:17:ab:83:be:28:6a:03:f3:bb:80:46:7b:
		bc:54:09:fa:e0:ae:d1:66:db:2d:71:c6:67:8d:a0:33:e2:90:
		8f:bd:a7:85:64:af:27:4d:ab:94:0c:df:29:30:99:ec:fb:e2:
		1c:55:02:ba:32:17:35:2e:6f:45:4c:59:79:f5:e4:6b:ff:f2:
		8f:a1:12:b0:4e:e9:7f:c0:52:ed:65:01:90:10:70:42:47:a2:
		3a:8d:44:ca:d8:3f:aa:3f:a2:6d:60:8f:d6:ca:29:b9:66:1e:
		95:a0:28:79:d1:a3:17:47:b6:9e:8a:b3:e4:e3:83:eb:1b:7f:
		3c:63:6a:44:42:70:4a:47:3d:7f:3d:10:3e:a9:fc:1b:40:83:
		13:4e:48:9f:f8:cc:3d:28:8f:c5:5c:63:02:8a:b1:35:f5:b3:
		0c:36:b7:db:3a:9e:fe:95:79:f2:29:00:22:c4:34:8e:2e:b0:
		97:bc:be:9b:7c:d3:37:11:55:00:da:8d:34:f0:9e:d7:4f:c3:
		82:47:ff:7f:64:c4:d1:79:d0:70:ae:d7:d6:68:f7:10:91:e1:
		2f:4f:80:09
-----BEGIN CERTIFICATE-----
MIIDmTCCAoGgAwIBAgIBAjANBgkqhkiG9w0BAQsFADBRMQswCQYDVQQGEwJDTjER
MA8GA1UECAwIU2hhbmdoYWkxETAPBgNVBAcMCFNoYW5naGFpMQ8wDQYDVQQKDAZI
dWF3ZWkxCzAJBgNVBAMMAmNhMB4XDTIyMTIwNDAzNTg0M1oXDTIzMTEyNTAzNTg0
M1owUjELMAkGA1UEBhMCQ04xETAPBgNVBAgMCFNoYW5naGFpMREwDwYDVQQHDAhT
aGFuZ2hhaTEPMA0GA1UECgwGSHVhd2VpMQwwCgYDVQQDDANrY20wggEiMA0GCSqG
SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBIl8Ab/jWA4OFGlxUNWh7pWPFz7675Prx
+mHOn0mfnwCb47UN0HQamcB0VB3aTKG+60Ark2W8LoRxPLTOoZct+A6YNxBG06f3
9bctv49MrxOAjmCXe0FSi8nnr3r/0w9qX/iRRfj2ERN4yKdWO+Arewpu56XeSf4W
Ud3cSWsbenf+NvRIKScld7cdDg710E1cCJPioxRChLnwaz/R94qAgu41xOEccWMY
1W6KuTF69WinOy7QRxTh83eiHh+JUSfxa9aCGOI5mwngZeLVilxG2Q7BFGRBdmFi
p2rV0U4cqLMfJ6nf9KFjdV4LDaTb0dzo6leQF2OFj+xcAx7F83ZfAgMBAAGjezB5
MAkGA1UdEwQCMAAwLAYJYIZIAYb4QgENBB8WHU9wZW5TU0wgR2VuZXJhdGVkIENl
cnRpZmljYXRlMB0GA1UdDgQWBBQZMNU5zBKKF7PmwN7Z2iy3WIIs6zAfBgNVHSME
GDAWgBSGfQMIHjiSl6XLppZvbtu8pOBnCjANBgkqhkiG9w0BAQsFAAOCAQEAWtaH
HH0ZNau20grGKN7SmekewJJYM3lCdw2QIDzqlkyFBOPw8eEN3CD6F6uDvihqA/O7
gEZ7vFQJ+uCu0WbbLXHGZ42gM+KQj72nhWSvJ02rlAzfKTCZ7PviHFUCujIXNS5v
RUxZefXka//yX6ESsE7pf8BS7WUBkBBwQkeiOo1Eytg/qj+ibWCP1sopuWYelaAo
edGjF0e2noqz5OOD6xt/PGNqREJwSkc9fz0QPqn8G0CDE05In/jMPSiPxVxjAoqx
NfWzDDa32zqe/pV58ikAIsQ0ji6wl7y+m3zTNxFVANqNNPCe10/Dgkf/f2TE0XnQ
cK7X1mj3EJHhL0+ACQ==
-----END CERTIFICATE-----`
)

const (
	deviceId = 1
	command = 0x80000003
)

var (
	byteTable = []int{
		48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
		80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
		109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}
	taId = []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10}
	keyId = []byte{
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20}
	hostKeyId = []byte{
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30}
	account = []byte{
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40}
	password = []byte{
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50}
)

var (
	IKName = []byte{
		0x00, 0x0b, 0x25, 0x7f, 0x26, 0x0b, 0x02, 0x18, 0xf2, 0x15, 0xda, 0x02, 0xf9, 0xba, 0x7c, 0xf2, 0x68,
		0x15, 0x47, 0x80, 0x47, 0xa9, 0xaf, 0x60, 0x04, 0x88, 0x8e, 0x57, 0xfb, 0x34, 0x02, 0xd0, 0xf3, 0xf0}
	testquote = []byte{
		0xff, 0x54, 0x43, 0x47, 0x80, 0x18, 0x00, 0x22, 0x00, 0x0b, 0x12, 0x66, 0xfc, 0x6a, 0x0d, 0xdf, 0x97,
		0xb2, 0x9d, 0x01, 0x5d, 0xa0, 0xba, 0x65, 0x88, 0x02, 0x46, 0xfd, 0x6a, 0x6c, 0x07, 0xd4, 0x9f, 0x4a,
		0xd2, 0x15, 0xd8, 0x4c, 0x77, 0xf2, 0x74, 0x5d, 0x00, 0x20, 0x8f, 0xf2, 0x28, 0xf1, 0xbe, 0xe4, 0x63,
		0x0f, 0x6d, 0xe3, 0x52, 0xf0, 0xa0, 0x17, 0x8d, 0xc8, 0xd4, 0x48, 0x15, 0x06, 0xc1, 0x67, 0x51, 0xcd,
		0x50, 0x36, 0x87, 0xa5, 0x5f, 0xcf, 0xb8, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x17, 0x06, 0x19, 0x00, 0x16, 0x36, 0x36, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x04, 0x03, 0xff, 0xff, 0xff, 0x00, 0x20, 0x3f, 0x27, 0x08, 0x3e, 0x20, 0xdb,
		0x7c, 0x0b, 0xf0, 0xe3, 0x16, 0x21, 0x19, 0x00, 0xa9, 0x0a, 0x53, 0xe9, 0x9e, 0xf1, 0x2a, 0x68, 0x62,
		0x2e, 0x89, 0x79, 0x27, 0x93, 0x59, 0x88, 0x03, 0xd2}
	testsignature = []byte{
		0x7b, 0x22, 0x41, 0x6c, 0x67, 0x22, 0x3a, 0x32, 0x30, 0x2c, 0x22, 0x52, 0x53, 0x41, 0x22, 0x3a, 0x7b,
		0x22, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x22, 0x3a, 0x31, 0x31, 0x2c, 0x22, 0x53, 0x69, 0x67,
		0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x3a, 0x22, 0x47, 0x67, 0x30, 0x70, 0x78, 0x32, 0x47, 0x66,
		0x73, 0x38, 0x56, 0x32, 0x2b, 0x43, 0x77, 0x42, 0x2b, 0x6c, 0x55, 0x35, 0x78, 0x5a, 0x31, 0x55, 0x54,
		0x51, 0x6d, 0x36, 0x74, 0x55, 0x6e, 0x45, 0x43, 0x53, 0x44, 0x34, 0x59, 0x4b, 0x35, 0x34, 0x6a, 0x4e,
		0x32, 0x46, 0x49, 0x31, 0x52, 0x78, 0x4f, 0x6a, 0x58, 0x44, 0x79, 0x50, 0x63, 0x36, 0x4d, 0x47, 0x6e,
		0x67, 0x6e, 0x4c, 0x68, 0x2f, 0x4c, 0x31, 0x31, 0x46, 0x4e, 0x69, 0x6e, 0x49, 0x42, 0x30, 0x61, 0x55,
		0x53, 0x75, 0x63, 0x2f, 0x63, 0x6e, 0x76, 0x41, 0x52, 0x45, 0x41, 0x4a, 0x52, 0x50, 0x65, 0x39, 0x2b,
		0x42, 0x69, 0x50, 0x30, 0x69, 0x66, 0x6c, 0x53, 0x51, 0x45, 0x48, 0x6e, 0x63, 0x4d, 0x57, 0x30, 0x43,
		0x6d, 0x47, 0x6a, 0x42, 0x30, 0x6d, 0x30, 0x75, 0x43, 0x65, 0x77, 0x70, 0x63, 0x4d, 0x50, 0x73, 0x43,
		0x44, 0x4f, 0x52, 0x78, 0x4b, 0x4b, 0x2b, 0x4d, 0x4c, 0x35, 0x54, 0x38, 0x75, 0x4c, 0x4e, 0x65, 0x6d,
		0x4b, 0x58, 0x45, 0x50, 0x4f, 0x69, 0x36, 0x4c, 0x77, 0x49, 0x6b, 0x39, 0x38, 0x63, 0x6b, 0x64, 0x61,
		0x4f, 0x65, 0x76, 0x58, 0x39, 0x42, 0x62, 0x4c, 0x5a, 0x4e, 0x77, 0x7a, 0x51, 0x35, 0x4d, 0x42, 0x73,
		0x33, 0x6e, 0x50, 0x50, 0x48, 0x6c, 0x47, 0x39, 0x44, 0x70, 0x72, 0x68, 0x63, 0x6b, 0x67, 0x73, 0x44,
		0x48, 0x43, 0x75, 0x73, 0x72, 0x43, 0x34, 0x4b, 0x71, 0x5a, 0x48, 0x2f, 0x32, 0x39, 0x52, 0x54, 0x78,
		0x70, 0x58, 0x6d, 0x65, 0x39, 0x43, 0x4e, 0x50, 0x43, 0x6f, 0x6b, 0x61, 0x52, 0x6f, 0x70, 0x31, 0x77,
		0x77, 0x33, 0x54, 0x4e, 0x39, 0x79, 0x72, 0x5a, 0x68, 0x6d, 0x38, 0x55, 0x47, 0x47, 0x4b, 0x48, 0x66,
		0x55, 0x33, 0x59, 0x42, 0x63, 0x66, 0x77, 0x32, 0x57, 0x6f, 0x78, 0x36, 0x50, 0x58, 0x72, 0x61, 0x7a,
		0x48, 0x37, 0x52, 0x6a, 0x72, 0x66, 0x4b, 0x57, 0x62, 0x59, 0x69, 0x4b, 0x56, 0x79, 0x48, 0x67, 0x36,
		0x56, 0x4e, 0x45, 0x32, 0x4e, 0x4f, 0x75, 0x6d, 0x41, 0x76, 0x36, 0x54, 0x30, 0x58, 0x48, 0x78, 0x2b,
		0x39, 0x39, 0x53, 0x71, 0x6f, 0x58, 0x30, 0x6c, 0x6d, 0x39, 0x4a, 0x7a, 0x30, 0x39, 0x77, 0x53, 0x74,
		0x54, 0x59, 0x35, 0x33, 0x71, 0x66, 0x6d, 0x4e, 0x32, 0x31, 0x36, 0x41, 0x69, 0x32, 0x73, 0x57, 0x39,
		0x72, 0x66, 0x2b, 0x74, 0x70, 0x7a, 0x7a, 0x6a, 0x6a, 0x36, 0x67, 0x3d, 0x3d, 0x22, 0x7d, 0x2c, 0x22,
		0x45, 0x43, 0x43, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c, 0x7d}
	testpcr = []byte{
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x30, 0x30, 0x0a, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x30, 0x31, 0x0a, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x30, 0x32, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x30, 0x33, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73,
		0x68, 0x61, 0x31, 0x20, 0x30, 0x34, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61,
		0x31, 0x20, 0x30, 0x35, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20,
		0x30, 0x36, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x30, 0x37,
		0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x30, 0x38, 0x0a, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x30, 0x39, 0x0a, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x31, 0x30, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x31, 0x31, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
		0x73, 0x68, 0x61, 0x31, 0x20, 0x31, 0x32, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68,
		0x61, 0x31, 0x20, 0x31, 0x33, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31,
		0x20, 0x31, 0x34, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x31,
		0x35, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x31, 0x36, 0x0a,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x31, 0x37, 0x0a, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x31, 0x38, 0x0a, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x31, 0x39, 0x0a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x20, 0x73, 0x68, 0x61, 0x31, 0x20, 0x32, 0x30, 0x0a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x20, 0x73,
		0x68, 0x61, 0x31, 0x20, 0x32, 0x31, 0x0a, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
		0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x20, 0x73, 0x68, 0x61,
		0x31, 0x20, 0x32, 0x32, 0x0a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x73, 0x68, 0x61, 0x31, 0x20,
		0x32, 0x33, 0x0a}
	/*kcmcert = []byte{
		0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20,
		0x44, 0x61, 0x74, 0x61, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x56, 0x65, 0x72,
		0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x33, 0x20, 0x28, 0x30, 0x78, 0x32, 0x29, 0x0a, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65,
		0x72, 0x3a, 0x20, 0x32, 0x20, 0x28, 0x30, 0x78, 0x32, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x41, 0x6c, 0x67, 0x6f, 0x72,
		0x69, 0x74, 0x68, 0x6d, 0x3a, 0x20, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x57, 0x69, 0x74, 0x68, 0x52,
		0x53, 0x41, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x3a, 0x20, 0x43, 0x3d, 0x43, 0x4e, 0x2c,
		0x20, 0x53, 0x54, 0x3d, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x68, 0x61, 0x69, 0x2c, 0x20, 0x4c, 0x3d, 0x53,
		0x68, 0x61, 0x6e, 0x67, 0x68, 0x61, 0x69, 0x2c, 0x20, 0x4f, 0x3d, 0x48, 0x75, 0x61, 0x77, 0x65, 0x69,
		0x2c, 0x20, 0x43, 0x4e, 0x3d, 0x63, 0x61, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x56,
		0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x4e, 0x6f,
		0x76, 0x20, 0x32, 0x35, 0x20, 0x30, 0x33, 0x3a, 0x34, 0x35, 0x3a, 0x35, 0x38, 0x20, 0x32, 0x30, 0x32,
		0x32, 0x20, 0x47, 0x4d, 0x54, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x4e, 0x6f, 0x74, 0x20, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x4e, 0x6f, 0x76, 0x20,
		0x31, 0x36, 0x20, 0x30, 0x33, 0x3a, 0x34, 0x35, 0x3a, 0x35, 0x38, 0x20, 0x32, 0x30, 0x32, 0x33, 0x20,
		0x47, 0x4d, 0x54, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x75, 0x62, 0x6a, 0x65,
		0x63, 0x74, 0x3a, 0x20, 0x43, 0x3d, 0x43, 0x4e, 0x2c, 0x20, 0x53, 0x54, 0x3d, 0x53, 0x68, 0x61, 0x6e,
		0x67, 0x68, 0x61, 0x69, 0x2c, 0x20, 0x4c, 0x3d, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x68, 0x61, 0x69, 0x2c,
		0x20, 0x4f, 0x3d, 0x48, 0x75, 0x61, 0x77, 0x65, 0x69, 0x2c, 0x20, 0x43, 0x4e, 0x3d, 0x6b, 0x63, 0x6d,
		0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
		0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x0a,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69,
		0x63, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x3a, 0x20,
		0x72, 0x73, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x53, 0x41, 0x20,
		0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x4b, 0x65, 0x79, 0x3a, 0x20, 0x28, 0x32, 0x30, 0x34, 0x38,
		0x20, 0x62, 0x69, 0x74, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x3a, 0x0a, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x30, 0x30, 0x3a, 0x61, 0x61, 0x3a, 0x35, 0x34, 0x3a, 0x32, 0x39, 0x3a, 0x65, 0x33, 0x3a, 0x63, 0x61,
		0x3a, 0x38, 0x64, 0x3a, 0x62, 0x32, 0x3a, 0x63, 0x61, 0x3a, 0x32, 0x63, 0x3a, 0x65, 0x32, 0x3a, 0x39,
		0x35, 0x3a, 0x37, 0x38, 0x3a, 0x31, 0x66, 0x3a, 0x64, 0x62, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x33,
		0x3a, 0x39, 0x66, 0x3a, 0x30, 0x31, 0x3a, 0x31, 0x36, 0x3a, 0x63, 0x32, 0x3a, 0x61, 0x34, 0x3a, 0x35,
		0x32, 0x3a, 0x62, 0x32, 0x3a, 0x32, 0x62, 0x3a, 0x36, 0x37, 0x3a, 0x39, 0x64, 0x3a, 0x62, 0x37, 0x3a,
		0x33, 0x62, 0x3a, 0x34, 0x63, 0x3a, 0x35, 0x39, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x63, 0x39, 0x3a, 0x39,
		0x32, 0x3a, 0x36, 0x32, 0x3a, 0x62, 0x35, 0x3a, 0x32, 0x30, 0x3a, 0x38, 0x64, 0x3a, 0x63, 0x32, 0x3a,
		0x65, 0x64, 0x3a, 0x66, 0x62, 0x3a, 0x39, 0x33, 0x3a, 0x32, 0x64, 0x3a, 0x33, 0x64, 0x3a, 0x31, 0x31,
		0x3a, 0x65, 0x30, 0x3a, 0x63, 0x62, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x38, 0x3a, 0x36, 0x65, 0x3a,
		0x63, 0x61, 0x3a, 0x30, 0x31, 0x3a, 0x37, 0x38, 0x3a, 0x32, 0x39, 0x3a, 0x32, 0x32, 0x3a, 0x31, 0x35,
		0x3a, 0x39, 0x64, 0x3a, 0x33, 0x33, 0x3a, 0x39, 0x37, 0x3a, 0x37, 0x32, 0x3a, 0x31, 0x64, 0x3a, 0x31,
		0x34, 0x3a, 0x32, 0x38, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x66, 0x3a, 0x63, 0x66, 0x3a, 0x35, 0x33,
		0x3a, 0x62, 0x31, 0x3a, 0x64, 0x38, 0x3a, 0x34, 0x63, 0x3a, 0x32, 0x36, 0x3a, 0x32, 0x32, 0x3a, 0x38,
		0x37, 0x3a, 0x37, 0x33, 0x3a, 0x65, 0x38, 0x3a, 0x39, 0x66, 0x3a, 0x33, 0x30, 0x3a, 0x30, 0x61, 0x3a,
		0x35, 0x37, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x63, 0x3a, 0x34, 0x30, 0x3a, 0x65, 0x36, 0x3a, 0x38,
		0x35, 0x3a, 0x65, 0x35, 0x3a, 0x38, 0x36, 0x3a, 0x34, 0x64, 0x3a, 0x63, 0x35, 0x3a, 0x66, 0x66, 0x3a,
		0x37, 0x66, 0x3a, 0x63, 0x66, 0x3a, 0x64, 0x33, 0x3a, 0x32, 0x37, 0x3a, 0x38, 0x65, 0x3a, 0x61, 0x62,
		0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x34, 0x3a, 0x64, 0x30, 0x3a, 0x66, 0x30, 0x3a, 0x39, 0x35, 0x3a,
		0x66, 0x33, 0x3a, 0x32, 0x31, 0x3a, 0x34, 0x62, 0x3a, 0x35, 0x63, 0x3a, 0x31, 0x32, 0x3a, 0x35, 0x37,
		0x3a, 0x37, 0x33, 0x3a, 0x30, 0x31, 0x3a, 0x35, 0x64, 0x3a, 0x32, 0x62, 0x3a, 0x39, 0x38, 0x3a, 0x0a,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x61, 0x34, 0x3a, 0x66, 0x38, 0x3a, 0x63, 0x37, 0x3a, 0x36, 0x32, 0x3a, 0x34, 0x39,
		0x3a, 0x30, 0x62, 0x3a, 0x30, 0x65, 0x3a, 0x38, 0x35, 0x3a, 0x31, 0x64, 0x3a, 0x64, 0x66, 0x3a, 0x66,
		0x30, 0x3a, 0x64, 0x33, 0x3a, 0x65, 0x35, 0x3a, 0x31, 0x38, 0x3a, 0x35, 0x36, 0x3a, 0x0a, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x66, 0x65, 0x3a, 0x35, 0x30, 0x3a, 0x37, 0x39, 0x3a, 0x61, 0x31, 0x3a, 0x64, 0x31, 0x3a, 0x32,
		0x30, 0x3a, 0x66, 0x61, 0x3a, 0x31, 0x65, 0x3a, 0x66, 0x30, 0x3a, 0x64, 0x33, 0x3a, 0x36, 0x38, 0x3a,
		0x31, 0x37, 0x3a, 0x39, 0x61, 0x3a, 0x37, 0x38, 0x3a, 0x39, 0x64, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31,
		0x35, 0x3a, 0x36, 0x38, 0x3a, 0x35, 0x38, 0x3a, 0x62, 0x39, 0x3a, 0x39, 0x38, 0x3a, 0x35, 0x65, 0x3a,
		0x65, 0x33, 0x3a, 0x64, 0x35, 0x3a, 0x35, 0x63, 0x3a, 0x33, 0x63, 0x3a, 0x30, 0x61, 0x3a, 0x63, 0x31,
		0x3a, 0x63, 0x38, 0x3a, 0x63, 0x30, 0x3a, 0x31, 0x33, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x39, 0x3a,
		0x34, 0x39, 0x3a, 0x38, 0x33, 0x3a, 0x63, 0x39, 0x3a, 0x35, 0x39, 0x3a, 0x62, 0x33, 0x3a, 0x36, 0x33,
		0x3a, 0x34, 0x31, 0x3a, 0x32, 0x34, 0x3a, 0x31, 0x31, 0x3a, 0x65, 0x30, 0x3a, 0x30, 0x63, 0x3a, 0x39,
		0x62, 0x3a, 0x36, 0x62, 0x3a, 0x36, 0x62, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x37, 0x3a, 0x36, 0x31,
		0x3a, 0x66, 0x34, 0x3a, 0x39, 0x38, 0x3a, 0x62, 0x65, 0x3a, 0x63, 0x36, 0x3a, 0x30, 0x61, 0x3a, 0x36,
		0x35, 0x3a, 0x66, 0x31, 0x3a, 0x65, 0x65, 0x3a, 0x38, 0x35, 0x3a, 0x35, 0x38, 0x3a, 0x39, 0x38, 0x3a,
		0x32, 0x64, 0x3a, 0x39, 0x34, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x62, 0x3a, 0x34, 0x30, 0x3a, 0x62,
		0x38, 0x3a, 0x36, 0x38, 0x3a, 0x31, 0x33, 0x3a, 0x62, 0x32, 0x3a, 0x36, 0x62, 0x3a, 0x39, 0x32, 0x3a,
		0x32, 0x30, 0x3a, 0x39, 0x35, 0x3a, 0x61, 0x64, 0x3a, 0x34, 0x65, 0x3a, 0x38, 0x61, 0x3a, 0x31, 0x33,
		0x3a, 0x35, 0x35, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x61, 0x61, 0x3a, 0x33, 0x38, 0x3a, 0x39, 0x63, 0x3a,
		0x33, 0x62, 0x3a, 0x32, 0x64, 0x3a, 0x66, 0x64, 0x3a, 0x62, 0x66, 0x3a, 0x31, 0x62, 0x3a, 0x31, 0x38,
		0x3a, 0x30, 0x39, 0x3a, 0x34, 0x35, 0x3a, 0x31, 0x64, 0x3a, 0x61, 0x62, 0x3a, 0x62, 0x30, 0x3a, 0x32,
		0x36, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x31, 0x3a, 0x65, 0x61, 0x3a, 0x66, 0x33, 0x3a, 0x34, 0x65,
		0x3a, 0x64, 0x36, 0x3a, 0x62, 0x30, 0x3a, 0x34, 0x35, 0x3a, 0x34, 0x37, 0x3a, 0x31, 0x36, 0x3a, 0x30,
		0x38, 0x3a, 0x62, 0x38, 0x3a, 0x36, 0x31, 0x3a, 0x32, 0x65, 0x3a, 0x64, 0x38, 0x3a, 0x34, 0x31, 0x3a,
		0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x35, 0x36, 0x3a, 0x62, 0x39, 0x3a, 0x63, 0x33, 0x3a, 0x65, 0x62, 0x3a, 0x36,
		0x33, 0x3a, 0x62, 0x31, 0x3a, 0x30, 0x62, 0x3a, 0x64, 0x33, 0x3a, 0x66, 0x30, 0x3a, 0x34, 0x30, 0x3a,
		0x34, 0x32, 0x3a, 0x32, 0x63, 0x3a, 0x32, 0x30, 0x3a, 0x39, 0x65, 0x3a, 0x34, 0x30, 0x3a, 0x0a, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x62, 0x38, 0x3a, 0x31, 0x39, 0x3a, 0x36, 0x36, 0x3a, 0x35, 0x32, 0x3a, 0x61, 0x34, 0x3a,
		0x38, 0x64, 0x3a, 0x30, 0x39, 0x3a, 0x63, 0x35, 0x3a, 0x63, 0x64, 0x3a, 0x34, 0x62, 0x3a, 0x65, 0x61,
		0x3a, 0x33, 0x61, 0x3a, 0x33, 0x38, 0x3a, 0x36, 0x36, 0x3a, 0x38, 0x38, 0x3a, 0x0a, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x31, 0x35, 0x3a, 0x63, 0x33, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x36, 0x35,
		0x35, 0x33, 0x37, 0x20, 0x28, 0x30, 0x78, 0x31, 0x30, 0x30, 0x30, 0x31, 0x29, 0x0a, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x35, 0x30, 0x39, 0x76, 0x33, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e,
		0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x58, 0x35, 0x30, 0x39, 0x76, 0x33, 0x20, 0x42, 0x61, 0x73, 0x69, 0x63, 0x20, 0x43, 0x6f,
		0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x41, 0x3a, 0x46, 0x41, 0x4c,
		0x53, 0x45, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4e, 0x65,
		0x74, 0x73, 0x63, 0x61, 0x70, 0x65, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x0a,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4f,
		0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20,
		0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x35, 0x30, 0x39, 0x76, 0x33, 0x20, 0x53, 0x75, 0x62,
		0x6a, 0x65, 0x63, 0x74, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
		0x65, 0x72, 0x3a, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x36, 0x39, 0x3a, 0x39, 0x38, 0x3a, 0x36, 0x44, 0x3a, 0x35, 0x41, 0x3a, 0x43,
		0x32, 0x3a, 0x35, 0x33, 0x3a, 0x43, 0x45, 0x3a, 0x38, 0x42, 0x3a, 0x39, 0x45, 0x3a, 0x45, 0x45, 0x3a,
		0x39, 0x44, 0x3a, 0x39, 0x30, 0x3a, 0x44, 0x34, 0x3a, 0x41, 0x37, 0x3a, 0x38, 0x36, 0x3a, 0x30, 0x35,
		0x3a, 0x34, 0x34, 0x3a, 0x34, 0x36, 0x3a, 0x45, 0x44, 0x3a, 0x43, 0x43, 0x0a, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x58, 0x35, 0x30, 0x39, 0x76, 0x33, 0x20, 0x41, 0x75,
		0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x49, 0x64, 0x65, 0x6e, 0x74,
		0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6b, 0x65, 0x79, 0x69, 0x64, 0x3a, 0x44, 0x33, 0x3a, 0x35,
		0x34, 0x3a, 0x38, 0x41, 0x3a, 0x34, 0x42, 0x3a, 0x43, 0x32, 0x3a, 0x36, 0x34, 0x3a, 0x39, 0x34, 0x3a,
		0x42, 0x46, 0x3a, 0x39, 0x45, 0x3a, 0x46, 0x39, 0x3a, 0x34, 0x41, 0x3a, 0x38, 0x38, 0x3a, 0x43, 0x37,
		0x3a, 0x45, 0x39, 0x3a, 0x45, 0x32, 0x3a, 0x31, 0x30, 0x3a, 0x31, 0x30, 0x3a, 0x30, 0x37, 0x3a, 0x43,
		0x45, 0x3a, 0x39, 0x46, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
		0x72, 0x65, 0x20, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x3a, 0x20, 0x73, 0x68, 0x61,
		0x32, 0x35, 0x36, 0x57, 0x69, 0x74, 0x68, 0x52, 0x53, 0x41, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
		0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x30, 0x3a, 0x64,
		0x66, 0x3a, 0x64, 0x61, 0x3a, 0x34, 0x33, 0x3a, 0x35, 0x35, 0x3a, 0x33, 0x65, 0x3a, 0x62, 0x30, 0x3a,
		0x30, 0x39, 0x3a, 0x63, 0x30, 0x3a, 0x31, 0x37, 0x3a, 0x32, 0x31, 0x3a, 0x66, 0x61, 0x3a, 0x62, 0x63,
		0x3a, 0x30, 0x38, 0x3a, 0x37, 0x33, 0x3a, 0x38, 0x31, 0x3a, 0x39, 0x39, 0x3a, 0x63, 0x64, 0x3a, 0x0a,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x62, 0x3a, 0x33, 0x35, 0x3a, 0x32, 0x62,
		0x3a, 0x31, 0x36, 0x3a, 0x64, 0x39, 0x3a, 0x63, 0x36, 0x3a, 0x30, 0x66, 0x3a, 0x30, 0x65, 0x3a, 0x63,
		0x62, 0x3a, 0x66, 0x38, 0x3a, 0x38, 0x65, 0x3a, 0x36, 0x33, 0x3a, 0x65, 0x66, 0x3a, 0x33, 0x30, 0x3a,
		0x65, 0x63, 0x3a, 0x64, 0x31, 0x3a, 0x64, 0x65, 0x3a, 0x30, 0x34, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x30, 0x3a, 0x37, 0x39, 0x3a, 0x33, 0x65, 0x3a, 0x31, 0x31, 0x3a,
		0x66, 0x35, 0x3a, 0x38, 0x66, 0x3a, 0x65, 0x37, 0x3a, 0x64, 0x32, 0x3a, 0x39, 0x63, 0x3a, 0x65, 0x64,
		0x3a, 0x63, 0x34, 0x3a, 0x65, 0x37, 0x3a, 0x32, 0x33, 0x3a, 0x35, 0x39, 0x3a, 0x66, 0x39, 0x3a, 0x65,
		0x64, 0x3a, 0x31, 0x31, 0x3a, 0x35, 0x65, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x66, 0x35, 0x3a, 0x33, 0x66, 0x3a, 0x61, 0x66, 0x3a, 0x31, 0x32, 0x3a, 0x32, 0x65, 0x3a, 0x38,
		0x63, 0x3a, 0x36, 0x61, 0x3a, 0x33, 0x61, 0x3a, 0x64, 0x36, 0x3a, 0x33, 0x32, 0x3a, 0x36, 0x61, 0x3a,
		0x62, 0x39, 0x3a, 0x35, 0x62, 0x3a, 0x65, 0x38, 0x3a, 0x38, 0x64, 0x3a, 0x65, 0x63, 0x3a, 0x61, 0x37,
		0x3a, 0x65, 0x35, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x66, 0x3a,
		0x65, 0x37, 0x3a, 0x34, 0x63, 0x3a, 0x31, 0x64, 0x3a, 0x35, 0x31, 0x3a, 0x36, 0x31, 0x3a, 0x36, 0x38,
		0x3a, 0x66, 0x65, 0x3a, 0x39, 0x37, 0x3a, 0x32, 0x37, 0x3a, 0x31, 0x64, 0x3a, 0x32, 0x34, 0x3a, 0x34,
		0x66, 0x3a, 0x37, 0x34, 0x3a, 0x66, 0x39, 0x3a, 0x36, 0x66, 0x3a, 0x38, 0x34, 0x3a, 0x61, 0x66, 0x3a,
		0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x66, 0x3a, 0x32, 0x37, 0x3a, 0x30,
		0x35, 0x3a, 0x33, 0x63, 0x3a, 0x61, 0x62, 0x3a, 0x62, 0x64, 0x3a, 0x34, 0x64, 0x3a, 0x62, 0x64, 0x3a,
		0x36, 0x39, 0x3a, 0x66, 0x63, 0x3a, 0x63, 0x36, 0x3a, 0x65, 0x61, 0x3a, 0x62, 0x63, 0x3a, 0x65, 0x30,
		0x3a, 0x62, 0x36, 0x3a, 0x32, 0x66, 0x3a, 0x66, 0x64, 0x3a, 0x35, 0x63, 0x3a, 0x0a, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x31, 0x3a, 0x35, 0x38, 0x3a, 0x64, 0x39, 0x3a, 0x37, 0x63,
		0x3a, 0x63, 0x30, 0x3a, 0x38, 0x38, 0x3a, 0x38, 0x39, 0x3a, 0x62, 0x37, 0x3a, 0x33, 0x31, 0x3a, 0x63,
		0x31, 0x3a, 0x35, 0x66, 0x3a, 0x31, 0x61, 0x3a, 0x38, 0x62, 0x3a, 0x32, 0x35, 0x3a, 0x37, 0x35, 0x3a,
		0x66, 0x33, 0x3a, 0x34, 0x37, 0x3a, 0x33, 0x34, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x63, 0x35, 0x3a, 0x32, 0x35, 0x3a, 0x61, 0x34, 0x3a, 0x64, 0x31, 0x3a, 0x65, 0x61, 0x3a,
		0x61, 0x35, 0x3a, 0x61, 0x62, 0x3a, 0x39, 0x30, 0x3a, 0x39, 0x61, 0x3a, 0x33, 0x64, 0x3a, 0x30, 0x65,
		0x3a, 0x32, 0x63, 0x3a, 0x36, 0x33, 0x3a, 0x39, 0x33, 0x3a, 0x61, 0x61, 0x3a, 0x61, 0x37, 0x3a, 0x36,
		0x64, 0x3a, 0x31, 0x38, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x38,
		0x3a, 0x65, 0x39, 0x3a, 0x63, 0x36, 0x3a, 0x39, 0x36, 0x3a, 0x31, 0x63, 0x3a, 0x39, 0x62, 0x3a, 0x37,
		0x62, 0x3a, 0x65, 0x36, 0x3a, 0x62, 0x33, 0x3a, 0x63, 0x36, 0x3a, 0x62, 0x38, 0x3a, 0x36, 0x35, 0x3a,
		0x64, 0x31, 0x3a, 0x30, 0x61, 0x3a, 0x39, 0x65, 0x3a, 0x33, 0x38, 0x3a, 0x30, 0x31, 0x3a, 0x62, 0x31,
		0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x37, 0x3a, 0x32, 0x65, 0x3a,
		0x31, 0x63, 0x3a, 0x35, 0x32, 0x3a, 0x32, 0x35, 0x3a, 0x34, 0x30, 0x3a, 0x65, 0x38, 0x3a, 0x30, 0x34,
		0x3a, 0x38, 0x65, 0x3a, 0x64, 0x31, 0x3a, 0x62, 0x32, 0x3a, 0x63, 0x32, 0x3a, 0x31, 0x65, 0x3a, 0x66,
		0x30, 0x3a, 0x66, 0x37, 0x3a, 0x32, 0x33, 0x3a, 0x33, 0x38, 0x3a, 0x61, 0x36, 0x3a, 0x0a, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x63, 0x3a, 0x30, 0x37, 0x3a, 0x36, 0x38, 0x3a, 0x63,
		0x62, 0x3a, 0x65, 0x65, 0x3a, 0x31, 0x39, 0x3a, 0x38, 0x66, 0x3a, 0x31, 0x36, 0x3a, 0x66, 0x31, 0x3a,
		0x30, 0x38, 0x3a, 0x66, 0x36, 0x3a, 0x38, 0x39, 0x3a, 0x66, 0x66, 0x3a, 0x34, 0x30, 0x3a, 0x62, 0x35,
		0x3a, 0x33, 0x65, 0x3a, 0x39, 0x63, 0x3a, 0x39, 0x66, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x36, 0x63, 0x3a, 0x32, 0x64, 0x3a, 0x61, 0x39, 0x3a, 0x63, 0x36, 0x3a, 0x36, 0x35,
		0x3a, 0x65, 0x38, 0x3a, 0x34, 0x61, 0x3a, 0x33, 0x38, 0x3a, 0x38, 0x33, 0x3a, 0x63, 0x36, 0x3a, 0x35,
		0x39, 0x3a, 0x37, 0x38, 0x3a, 0x32, 0x33, 0x3a, 0x37, 0x61, 0x3a, 0x38, 0x34, 0x3a, 0x37, 0x36, 0x3a,
		0x35, 0x62, 0x3a, 0x30, 0x35, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31,
		0x35, 0x3a, 0x36, 0x61, 0x3a, 0x63, 0x38, 0x3a, 0x65, 0x65, 0x3a, 0x33, 0x34, 0x3a, 0x65, 0x31, 0x3a,
		0x66, 0x38, 0x3a, 0x63, 0x30, 0x3a, 0x39, 0x66, 0x3a, 0x30, 0x38, 0x3a, 0x63, 0x33, 0x3a, 0x32, 0x35,
		0x3a, 0x31, 0x39, 0x3a, 0x39, 0x66, 0x3a, 0x38, 0x32, 0x3a, 0x62, 0x35, 0x3a, 0x38, 0x39, 0x3a, 0x37,
		0x30, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x63, 0x3a, 0x38, 0x39,
		0x3a, 0x32, 0x63, 0x3a, 0x35, 0x37, 0x3a, 0x33, 0x66, 0x3a, 0x61, 0x64, 0x3a, 0x39, 0x64, 0x3a, 0x38,
		0x64, 0x3a, 0x37, 0x33, 0x3a, 0x31, 0x64, 0x3a, 0x34, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x37, 0x30, 0x3a,
		0x37, 0x61, 0x3a, 0x30, 0x35, 0x3a, 0x64, 0x30, 0x3a, 0x30, 0x33, 0x3a, 0x63, 0x61, 0x3a, 0x0a, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x33, 0x3a, 0x63, 0x65, 0x3a, 0x35, 0x66, 0x3a,
		0x62, 0x38, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52,
		0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49,
		0x44, 0x6d, 0x54, 0x43, 0x43, 0x41, 0x6f, 0x47, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42,
		0x41, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41,
		0x51, 0x73, 0x46, 0x41, 0x44, 0x42, 0x52, 0x4d, 0x51, 0x73, 0x77, 0x43, 0x51, 0x59, 0x44, 0x56, 0x51,
		0x51, 0x47, 0x45, 0x77, 0x4a, 0x44, 0x54, 0x6a, 0x45, 0x52, 0x0a, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31,
		0x55, 0x45, 0x43, 0x41, 0x77, 0x49, 0x55, 0x32, 0x68, 0x68, 0x62, 0x6d, 0x64, 0x6f, 0x59, 0x57, 0x6b,
		0x78, 0x45, 0x54, 0x41, 0x50, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x63, 0x4d, 0x43, 0x46, 0x4e, 0x6f,
		0x59, 0x57, 0x35, 0x6e, 0x61, 0x47, 0x46, 0x70, 0x4d, 0x51, 0x38, 0x77, 0x44, 0x51, 0x59, 0x44, 0x56,
		0x51, 0x51, 0x4b, 0x44, 0x41, 0x5a, 0x49, 0x0a, 0x64, 0x57, 0x46, 0x33, 0x5a, 0x57, 0x6b, 0x78, 0x43,
		0x7a, 0x41, 0x4a, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x4d, 0x4d, 0x41, 0x6d, 0x4e, 0x68, 0x4d, 0x42,
		0x34, 0x58, 0x44, 0x54, 0x49, 0x79, 0x4d, 0x54, 0x45, 0x79, 0x4e, 0x54, 0x41, 0x7a, 0x4e, 0x44, 0x55,
		0x31, 0x4f, 0x46, 0x6f, 0x58, 0x44, 0x54, 0x49, 0x7a, 0x4d, 0x54, 0x45, 0x78, 0x4e, 0x6a, 0x41, 0x7a,
		0x4e, 0x44, 0x55, 0x31, 0x0a, 0x4f, 0x46, 0x6f, 0x77, 0x55, 0x6a, 0x45, 0x4c, 0x4d, 0x41, 0x6b, 0x47,
		0x41, 0x31, 0x55, 0x45, 0x42, 0x68, 0x4d, 0x43, 0x51, 0x30, 0x34, 0x78, 0x45, 0x54, 0x41, 0x50, 0x42,
		0x67, 0x4e, 0x56, 0x42, 0x41, 0x67, 0x4d, 0x43, 0x46, 0x4e, 0x6f, 0x59, 0x57, 0x35, 0x6e, 0x61, 0x47,
		0x46, 0x70, 0x4d, 0x52, 0x45, 0x77, 0x44, 0x77, 0x59, 0x44, 0x56, 0x51, 0x51, 0x48, 0x44, 0x41, 0x68,
		0x54, 0x0a, 0x61, 0x47, 0x46, 0x75, 0x5a, 0x32, 0x68, 0x68, 0x61, 0x54, 0x45, 0x50, 0x4d, 0x41, 0x30,
		0x47, 0x41, 0x31, 0x55, 0x45, 0x43, 0x67, 0x77, 0x47, 0x53, 0x48, 0x56, 0x68, 0x64, 0x32, 0x56, 0x70,
		0x4d, 0x51, 0x77, 0x77, 0x43, 0x67, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x44, 0x41, 0x4e, 0x72, 0x59,
		0x32, 0x30, 0x77, 0x67, 0x67, 0x45, 0x69, 0x4d, 0x41, 0x30, 0x47, 0x43, 0x53, 0x71, 0x47, 0x0a, 0x53,
		0x49, 0x62, 0x33, 0x44, 0x51, 0x45, 0x42, 0x41, 0x51, 0x55, 0x41, 0x41, 0x34, 0x49, 0x42, 0x44, 0x77,
		0x41, 0x77, 0x67, 0x67, 0x45, 0x4b, 0x41, 0x6f, 0x49, 0x42, 0x41, 0x51, 0x43, 0x71, 0x56, 0x43, 0x6e,
		0x6a, 0x79, 0x6f, 0x32, 0x79, 0x79, 0x69, 0x7a, 0x69, 0x6c, 0x58, 0x67, 0x66, 0x32, 0x37, 0x4f, 0x66,
		0x41, 0x52, 0x62, 0x43, 0x70, 0x46, 0x4b, 0x79, 0x4b, 0x32, 0x65, 0x64, 0x0a, 0x74, 0x7a, 0x74, 0x4d,
		0x57, 0x63, 0x6d, 0x53, 0x59, 0x72, 0x55, 0x67, 0x6a, 0x63, 0x4c, 0x74, 0x2b, 0x35, 0x4d, 0x74, 0x50,
		0x52, 0x48, 0x67, 0x79, 0x7a, 0x68, 0x75, 0x79, 0x67, 0x46, 0x34, 0x4b, 0x53, 0x49, 0x56, 0x6e, 0x54,
		0x4f, 0x58, 0x63, 0x68, 0x30, 0x55, 0x4b, 0x4a, 0x2f, 0x50, 0x55, 0x37, 0x48, 0x59, 0x54, 0x43, 0x59,
		0x69, 0x68, 0x33, 0x50, 0x6f, 0x6e, 0x7a, 0x41, 0x4b, 0x0a, 0x56, 0x34, 0x78, 0x41, 0x35, 0x6f, 0x58,
		0x6c, 0x68, 0x6b, 0x33, 0x46, 0x2f, 0x33, 0x2f, 0x50, 0x30, 0x79, 0x65, 0x4f, 0x71, 0x36, 0x54, 0x51,
		0x38, 0x4a, 0x58, 0x7a, 0x49, 0x55, 0x74, 0x63, 0x45, 0x6c, 0x64, 0x7a, 0x41, 0x56, 0x30, 0x72, 0x6d,
		0x4b, 0x54, 0x34, 0x78, 0x32, 0x4a, 0x4a, 0x43, 0x77, 0x36, 0x46, 0x48, 0x64, 0x2f, 0x77, 0x30, 0x2b,
		0x55, 0x59, 0x56, 0x76, 0x35, 0x51, 0x0a, 0x65, 0x61, 0x48, 0x52, 0x49, 0x50, 0x6f, 0x65, 0x38, 0x4e,
		0x4e, 0x6f, 0x46, 0x35, 0x70, 0x34, 0x6e, 0x52, 0x56, 0x6f, 0x57, 0x4c, 0x6d, 0x59, 0x58, 0x75, 0x50,
		0x56, 0x58, 0x44, 0x77, 0x4b, 0x77, 0x63, 0x6a, 0x41, 0x45, 0x78, 0x6c, 0x4a, 0x67, 0x38, 0x6c, 0x5a,
		0x73, 0x32, 0x4e, 0x42, 0x4a, 0x42, 0x48, 0x67, 0x44, 0x4a, 0x74, 0x72, 0x61, 0x36, 0x64, 0x68, 0x39,
		0x4a, 0x69, 0x2b, 0x0a, 0x78, 0x67, 0x70, 0x6c, 0x38, 0x65, 0x36, 0x46, 0x57, 0x4a, 0x67, 0x74, 0x6c,
		0x43, 0x74, 0x41, 0x75, 0x47, 0x67, 0x54, 0x73, 0x6d, 0x75, 0x53, 0x49, 0x4a, 0x57, 0x74, 0x54, 0x6f,
		0x6f, 0x54, 0x56, 0x61, 0x6f, 0x34, 0x6e, 0x44, 0x73, 0x74, 0x2f, 0x62, 0x38, 0x62, 0x47, 0x41, 0x6c,
		0x46, 0x48, 0x61, 0x75, 0x77, 0x4a, 0x75, 0x48, 0x71, 0x38, 0x30, 0x37, 0x57, 0x73, 0x45, 0x56, 0x48,
		0x0a, 0x46, 0x67, 0x69, 0x34, 0x59, 0x53, 0x37, 0x59, 0x51, 0x56, 0x61, 0x35, 0x77, 0x2b, 0x74, 0x6a,
		0x73, 0x51, 0x76, 0x54, 0x38, 0x45, 0x42, 0x43, 0x4c, 0x43, 0x43, 0x65, 0x51, 0x4c, 0x67, 0x5a, 0x5a,
		0x6c, 0x4b, 0x6b, 0x6a, 0x51, 0x6e, 0x46, 0x7a, 0x55, 0x76, 0x71, 0x4f, 0x6a, 0x68, 0x6d, 0x69, 0x42,
		0x58, 0x44, 0x41, 0x67, 0x4d, 0x42, 0x41, 0x41, 0x47, 0x6a, 0x65, 0x7a, 0x42, 0x35, 0x0a, 0x4d, 0x41,
		0x6b, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x51, 0x43, 0x4d, 0x41, 0x41, 0x77, 0x4c, 0x41, 0x59,
		0x4a, 0x59, 0x49, 0x5a, 0x49, 0x41, 0x59, 0x62, 0x34, 0x51, 0x67, 0x45, 0x4e, 0x42, 0x42, 0x38, 0x57,
		0x48, 0x55, 0x39, 0x77, 0x5a, 0x57, 0x35, 0x54, 0x55, 0x30, 0x77, 0x67, 0x52, 0x32, 0x56, 0x75, 0x5a,
		0x58, 0x4a, 0x68, 0x64, 0x47, 0x56, 0x6b, 0x49, 0x45, 0x4e, 0x6c, 0x0a, 0x63, 0x6e, 0x52, 0x70, 0x5a,
		0x6d, 0x6c, 0x6a, 0x59, 0x58, 0x52, 0x6c, 0x4d, 0x42, 0x30, 0x47, 0x41, 0x31, 0x55, 0x64, 0x44, 0x67,
		0x51, 0x57, 0x42, 0x42, 0x52, 0x70, 0x6d, 0x47, 0x31, 0x61, 0x77, 0x6c, 0x50, 0x4f, 0x69, 0x35, 0x37,
		0x75, 0x6e, 0x5a, 0x44, 0x55, 0x70, 0x34, 0x59, 0x46, 0x52, 0x45, 0x62, 0x74, 0x7a, 0x44, 0x41, 0x66,
		0x42, 0x67, 0x4e, 0x56, 0x48, 0x53, 0x4d, 0x45, 0x0a, 0x47, 0x44, 0x41, 0x57, 0x67, 0x42, 0x54, 0x54,
		0x56, 0x49, 0x70, 0x4c, 0x77, 0x6d, 0x53, 0x55, 0x76, 0x35, 0x37, 0x35, 0x53, 0x6f, 0x6a, 0x48, 0x36,
		0x65, 0x49, 0x51, 0x45, 0x41, 0x66, 0x4f, 0x6e, 0x7a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b,
		0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x45,
		0x41, 0x4d, 0x4e, 0x2f, 0x61, 0x0a, 0x51, 0x31, 0x55, 0x2b, 0x73, 0x41, 0x6e, 0x41, 0x46, 0x79, 0x48,
		0x36, 0x76, 0x41, 0x68, 0x7a, 0x67, 0x5a, 0x6e, 0x4e, 0x47, 0x7a, 0x55, 0x72, 0x46, 0x74, 0x6e, 0x47,
		0x44, 0x77, 0x37, 0x4c, 0x2b, 0x49, 0x35, 0x6a, 0x37, 0x7a, 0x44, 0x73, 0x30, 0x64, 0x34, 0x45, 0x45,
		0x48, 0x6b, 0x2b, 0x45, 0x66, 0x57, 0x50, 0x35, 0x39, 0x4b, 0x63, 0x37, 0x63, 0x54, 0x6e, 0x49, 0x31,
		0x6e, 0x35, 0x0a, 0x37, 0x52, 0x46, 0x65, 0x39, 0x54, 0x2b, 0x76, 0x45, 0x69, 0x36, 0x4d, 0x61, 0x6a,
		0x72, 0x57, 0x4d, 0x6d, 0x71, 0x35, 0x57, 0x2b, 0x69, 0x4e, 0x37, 0x4b, 0x66, 0x6c, 0x50, 0x2b, 0x64,
		0x4d, 0x48, 0x56, 0x46, 0x68, 0x61, 0x50, 0x36, 0x58, 0x4a, 0x78, 0x30, 0x6b, 0x54, 0x33, 0x54, 0x35,
		0x62, 0x34, 0x53, 0x76, 0x2f, 0x79, 0x63, 0x46, 0x50, 0x4b, 0x75, 0x39, 0x54, 0x62, 0x31, 0x70, 0x0a,
		0x2f, 0x4d, 0x62, 0x71, 0x76, 0x4f, 0x43, 0x32, 0x4c, 0x2f, 0x31, 0x63, 0x4d, 0x56, 0x6a, 0x5a, 0x66,
		0x4d, 0x43, 0x49, 0x69, 0x62, 0x63, 0x78, 0x77, 0x56, 0x38, 0x61, 0x69, 0x79, 0x56, 0x31, 0x38, 0x30,
		0x63, 0x30, 0x78, 0x53, 0x57, 0x6b, 0x30, 0x65, 0x71, 0x6c, 0x71, 0x35, 0x43, 0x61, 0x50, 0x51, 0x34,
		0x73, 0x59, 0x35, 0x4f, 0x71, 0x70, 0x32, 0x30, 0x59, 0x69, 0x4f, 0x6e, 0x47, 0x0a, 0x6c, 0x68, 0x79,
		0x62, 0x65, 0x2b, 0x61, 0x7a, 0x78, 0x72, 0x68, 0x6c, 0x30, 0x51, 0x71, 0x65, 0x4f, 0x41, 0x47, 0x78,
		0x6c, 0x79, 0x34, 0x63, 0x55, 0x69, 0x56, 0x41, 0x36, 0x41, 0x53, 0x4f, 0x30, 0x62, 0x4c, 0x43, 0x48,
		0x76, 0x44, 0x33, 0x49, 0x7a, 0x69, 0x6d, 0x54, 0x41, 0x64, 0x6f, 0x79, 0x2b, 0x34, 0x5a, 0x6a, 0x78,
		0x62, 0x78, 0x43, 0x50, 0x61, 0x4a, 0x2f, 0x30, 0x43, 0x31, 0x0a, 0x50, 0x70, 0x79, 0x66, 0x62, 0x43,
		0x32, 0x70, 0x78, 0x6d, 0x58, 0x6f, 0x53, 0x6a, 0x69, 0x44, 0x78, 0x6c, 0x6c, 0x34, 0x49, 0x33, 0x71,
		0x45, 0x64, 0x6c, 0x73, 0x46, 0x46, 0x57, 0x72, 0x49, 0x37, 0x6a, 0x54, 0x68, 0x2b, 0x4d, 0x43, 0x66,
		0x43, 0x4d, 0x4d, 0x6c, 0x47, 0x5a, 0x2b, 0x43, 0x74, 0x59, 0x6c, 0x77, 0x54, 0x49, 0x6b, 0x73, 0x56,
		0x7a, 0x2b, 0x74, 0x6e, 0x59, 0x31, 0x7a, 0x0a, 0x48, 0x55, 0x41, 0x30, 0x63, 0x48, 0x6f, 0x46, 0x30,
		0x41, 0x50, 0x4b, 0x30, 0x38, 0x35, 0x66, 0x75, 0x41, 0x3d, 0x3d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
		0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d,
		0x2d, 0x2d, 0x2d, 0x0a}*/
)

var (
	emptyClientInfoErr  = "create empty ClientInfo error"
	createClientInfoErr = "create test ClientInfo error"
	sendrRportErr       = "test SendReport error"
	testClientInfo      = map[string]string{"test name": "test value"}
)

func CreateServerConfigFile() {
	ioutil.WriteFile(configFilePath, []byte(serverConfig), 0644)
}

func RemoveConfigFile() {
	os.Remove(configFilePath)
}

func TestClientapi(t *testing.T) {
	CreateServerConfigFile()
	defer RemoveConfigFile()

	config.InitFlags()
	config.LoadConfigs()
	defer RemoveFiles()
	config.HandleFlags()
	server := config.GetServerPort()

	go StartServer(server)
	defer StopServer()

	ras, err := CreateConn(server)
	if err != nil {
		t.Errorf("fail to Create connection %v", err)
	}
	defer ReleaseConn(ras)
	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	EKpubBlock, _ := pem.Decode([]byte(EKpubPEM))
	reqEC := GenerateEKCertRequest{
		EkPub: EKpubBlock.Bytes,
	}
	rspEC, err := ras.c.GenerateEKCert(ctx, &reqEC)
	if err != nil {
		t.Errorf("test GenerateEKCert error %v", err)
	}
	IKpubBlock, _ := pem.Decode([]byte(IKpubPEM))
	_, err = ras.c.GenerateIKCert(ctx, &GenerateIKCertRequest{
		EkCert: rspEC.EkCert,
		IkPub:  IKpubBlock.Bytes,
		IkName: IKName,
	})
	if err != nil {
		t.Errorf("test GenerateIKCert error %v", err)
	}

	// test empty clientinfo
	ci, err := json.Marshal(map[string]string{})
	if err != nil {
		t.Error(emptyClientInfoErr)
	}
	r1, err := ras.c.RegisterClient(ctx, &RegisterClientRequest{
		Cert:       createCert(),
		ClientInfo: string(ci),
	})
	if err != nil {
		t.Errorf("test RegisterClient with empty clientinfo error %v", err)
	}
	defer trustmgr.DeleteClientByID(r1.GetClientId())

	// test empty request
	_, err = ras.c.RegisterClient(ctx, &RegisterClientRequest{})
	if err == nil {
		t.Errorf("test RegisterClient with empty request failed")
	}
	template := x509.Certificate{
		SerialNumber: big.NewInt(cryptotools.GetSerialNumber()),
		NotBefore:    time.Now(),
		NotAfter:     time.Now().AddDate(1, 0, 0),
		KeyUsage: x509.KeyUsageDigitalSignature |
			x509.KeyUsageKeyEncipherment | x509.KeyUsageCertSign,
		IsCA:           false,
		MaxPathLenZero: true,
		IPAddresses:    []net.IP{net.ParseIP(config.GetIP())},
	}
	ikCertDer, _ := cryptotools.GenerateCertificate(&template,
		config.GetPcaKeyCert(), IKpubBlock.Bytes, config.GetPcaPrivateKey())

	ci, err = json.Marshal(testClientInfo)
	if err != nil {
		t.Error(createClientInfoErr)
	}
	r2, err := ras.c.RegisterClient(ctx, &RegisterClientRequest{
		Cert:       ikCertDer,
		ClientInfo: string(ci),
	})
	if err != nil {
		t.Errorf("test RegisterClient error %v", err)
	}

	// test empty clientId
	_, err = ras.c.SendHeartbeat(ctx, &SendHeartbeatRequest{})
	if err != nil {
		t.Errorf("test SendHeartbeat with empty ClientId failed")
	}

	HBrep, err := ras.c.SendHeartbeat(ctx, &SendHeartbeatRequest{ClientId: r2.GetClientId()})
	if err != nil {
		t.Errorf("test SendHeartbeat error %v", err)
	}

	// test empty report
	srRep, _ := ras.c.SendReport(ctx, &SendReportRequest{})
	if srRep.GetResult() {
		t.Errorf("test SendReport with empty report failed")
	}

	testbios, _ := ioutil.ReadFile(BIOSLogPath)
	testima, _ := ioutil.ReadFile(IMALogPath)
	srRep, _ = ras.c.SendReport(ctx, &SendReportRequest{
		ClientId:   r2.GetClientId(),
		Nonce:      HBrep.ClientConfig.Nonce,
		ClientInfo: string(ci),
		Quoted:     testquote,
		Signature:  testsignature,
		Manifests: []*Manifest{
			0: {Key: "pcr", Value: testpcr},
			1: {Key: "bios", Value: testbios},
			2: {Key: "ima", Value: testima},
		},
	})
	if !srRep.GetResult() {
		t.Errorf(sendrRportErr)
	}

	// test empty clientId
	_, err = ras.c.UnregisterClient(ctx, &UnregisterClientRequest{})
	if err != nil {
		t.Errorf("test UnregisterClient with empty clientId failed %v", err)
	}

	_, err = ras.c.UnregisterClient(ctx, &UnregisterClientRequest{
		ClientId: r2.GetClientId(),
	})
	if err != nil {
		t.Errorf("test UnregisterClient error %v", err)
	}
	defer trustmgr.DeleteClientByID(r2.GetClientId())
	defer trustmgr.DeleteReportByID(r2.GetClientId())
}

func TestClientapiInKC(t *testing.T) {
	server := config.GetServerPort()
	go StartServer(server)
	defer StopServer()

	ras, err := CreateConn(server)
	if err != nil {
		t.Errorf("fail to Create connection %v", err)
	}
	defer ReleaseConn(ras)
	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	// test SendKCMPubKeyCert
	_, err = ras.c.SendKCMPubKeyCert(ctx, &SendKCMPubKeyCertRequest{})
	if err != nil {
		t.Errorf("test SendKCMPubKeyCert failed %v", err)
	}

	// test empty deviceId
	_, err = ras.c.VerifyKTAPubKeyCert(ctx, &VerifyKTAPubKeyCertRequest{})
	if err != nil {
		t.Errorf("test VerifyKTAPubKeyCert with empty deviceId failed %v", err)
	}

	_, err = ras.c.VerifyKTAPubKeyCert(ctx, &VerifyKTAPubKeyCertRequest{
		ClientId:		deviceId,
		KtaPubKeyCert: 	createCert(),
	})
	if err != nil {
		t.Errorf("test VerifyKTAPubKeyCert error %v", err)
	}

	// test empty taId
	_, err = ras.c.KeyOperation(ctx, &KeyOperationRequest{})
	if err != nil {
		t.Errorf("test KeyOperation with empty taId failed %v", err)
	}

	message := inKeyInfo {
		taId:		taId,
		account:	account,
		password:	password,
		keyId:		keyId,
		hostKeyId:	hostKeyId,
		command:	command,
	}
	encMessage ,err := json.Marshal(message)
	if err != nil {
		t.Errorf("Encode inside json of key operation error: %v", err)
	}

	// TODO: create Key for symmetric encryption
	decKey := make([]byte, 32)

	// TODO: use decKey to encrypt encMessage as encCmdData
	encCmdData, err := aesGCMEncrypt(decKey, encMessage)
	if err != nil {
		t.Errorf("Encode AESGCM error: %v", err)
	}

	// TODO: use kcm public key to encrypt decKey as key
	kcmPublicKey, _, _ := cryptotools.DecodeKeyCertFromPEM([]byte(kcmCert))
	label := []byte("label")
	key, err := cryptotools.AsymmetricEncrypt(0x0001, 0x0000, kcmPublicKey.PublicKey, decKey, label)

	cmdData := tagCmdData {
		key:		key,
		encCmdData:	encCmdData,
	}
	outCmdData ,err := json.Marshal(cmdData)
	if err != nil {
		t.Errorf("Encode outside json of key operation error: %v", err)
	}

	_, err = ras.c.KeyOperation(ctx, &KeyOperationRequest{
		EncMessage:	outCmdData,
	})
	if err != nil {
		t.Errorf("test KeyOperation error %v", err)
	}
}

func TestDoClientapi(t *testing.T) {
	CreateServerConfigFile()
	defer RemoveConfigFile()

	config.LoadConfigs()
	defer RemoveFiles()
	config.HandleFlags()
	server := config.GetServerPort()

	go StartServer(server)
	defer StopServer()

	EKpubBlock, _ := pem.Decode([]byte(EKpubPEM))
	reqEC := GenerateEKCertRequest{
		EkPub: EKpubBlock.Bytes,
	}
	rspEC, err := DoGenerateEKCert(server, &reqEC)
	if err != nil {
		t.Errorf("test DoGenerateEKCert error %v", err)
	}
	IKpubBlock, _ := pem.Decode([]byte(IKpubPEM))
	_, err = DoGenerateIKCert(server, &GenerateIKCertRequest{
		EkCert: rspEC.EkCert,
		IkPub:  IKpubBlock.Bytes,
		IkName: IKName,
	})
	if err != nil {
		t.Errorf("test DoGenerateIKCert error %v", err)
	}

	// test empty clientinfo
	ci, err := json.Marshal(map[string]string{})
	if err != nil {
		t.Error(emptyClientInfoErr)
	}
	r1, err := DoRegisterClient(server, &RegisterClientRequest{
		Cert:       createCert(),
		ClientInfo: string(ci),
	})
	if err != nil {
		t.Errorf("test DoRegisterClient with empty clientinfo error %v", err)
	}
	defer trustmgr.DeleteClientByID(r1.GetClientId())

	// test empty request
	_, err = DoRegisterClient(server, &RegisterClientRequest{})
	if err == nil {
		t.Errorf("test DoRegisterClient with empty request failed")
	}
	template := x509.Certificate{
		SerialNumber: big.NewInt(cryptotools.GetSerialNumber()),
		NotBefore:    time.Now(),
		NotAfter:     time.Now().AddDate(1, 0, 0),
		KeyUsage: x509.KeyUsageDigitalSignature |
			x509.KeyUsageKeyEncipherment | x509.KeyUsageCertSign,
		IsCA:           false,
		MaxPathLenZero: true,
		IPAddresses:    []net.IP{net.ParseIP(config.GetIP())},
	}
	ikCertDer, _ := cryptotools.GenerateCertificate(&template,
		config.GetPcaKeyCert(), IKpubBlock.Bytes, config.GetPcaPrivateKey())

	ci, err = json.Marshal(testClientInfo)
	if err != nil {
		t.Error(createClientInfoErr)
	}
	r2, err := DoRegisterClient(server, &RegisterClientRequest{
		Cert:       ikCertDer,
		ClientInfo: string(ci),
	})
	if err != nil {
		t.Errorf("test DoRegisterClient error %v", err)
	}

	// test empty clientId
	_, err = DoSendHeartbeat(server, &SendHeartbeatRequest{})
	if err != nil {
		t.Errorf("test DoSendHeartbeat with empty ClientId failed")
	}

	HBrep, err := DoSendHeartbeat(server, &SendHeartbeatRequest{ClientId: r2.GetClientId()})
	if err != nil {
		t.Errorf("test DoSendHeartbeat error %v", err)
	}

	// test empty report
	srRep, _ := DoSendReport(server, &SendReportRequest{})
	if srRep.GetResult() {
		t.Errorf("test DoSendReport with empty report failed")
	}

	testbios, _ := ioutil.ReadFile(BIOSLogPath)
	testima, _ := ioutil.ReadFile(IMALogPath)
	srRep, _ = DoSendReport(server, &SendReportRequest{
		ClientId:   r2.GetClientId(),
		Nonce:      HBrep.ClientConfig.Nonce,
		ClientInfo: string(ci),
		Quoted:     testquote,
		Signature:  testsignature,
		Manifests: []*Manifest{
			0: {Key: "pcr", Value: testpcr},
			1: {Key: "bios", Value: testbios},
			2: {Key: "ima", Value: testima},
		},
	})
	if !srRep.GetResult() {
		t.Errorf(sendrRportErr)
	}
	_, err = DoUnregisterClient(server, &UnregisterClientRequest{})
	if err != nil {
		t.Errorf("test DoUnregisterClient with empty clientId failed %v", err)
	}

	_, err = DoUnregisterClient(server, &UnregisterClientRequest{
		ClientId: r2.GetClientId(),
	})
	if err != nil {
		t.Errorf("test DoUnregisterClient error %v", err)
	}
	defer trustmgr.DeleteClientByID(r2.GetClientId())
	defer trustmgr.DeleteReportByID(r2.GetClientId())
}

func TestDoClientapiInKC(t *testing.T) {
	server := config.GetServerPort()
	go StartServer(server)
	defer StopServer()

	// test SendKCMPubKeyCert
	_, err := DoSendKCMPubKeyCert(server, &SendKCMPubKeyCertRequest{})
	if err != nil {
		t.Errorf("test DoSendKCMPubKeyCert failed %v", err)
	}

	// test empty deviceId
	_, err = DoVerifyKTAPubKeyCert(server, &VerifyKTAPubKeyCertRequest{})
	if err != nil {
		t.Errorf("test DoVerifyKTAPubKeyCert with empty deviceId failed %v", err)
	}

	_, err = DoVerifyKTAPubKeyCert(server, &VerifyKTAPubKeyCertRequest{
		ClientId:		deviceId,
		KtaPubKeyCert: 	createCert(),
	})
	if err != nil {
		t.Errorf("test DoVerifyKTAPubKeyCert error %v", err)
	}

	// test empty taId
	_, err = DoKeyOperation(server, &KeyOperationRequest{})
	if err != nil {
		t.Errorf("test DoKeyOperation with empty taId failed %v", err)
	}

	message := inKeyInfo {
		taId:		taId,
		account:	account,
		password:	password,
		keyId:		keyId,
		hostKeyId:	hostKeyId,
		command:	command,
	}
	encMessage ,err := json.Marshal(message)
	if err != nil {
		t.Errorf("Encode inside json of key operation error, %v", err)
	}

	// TODO: create Key for symmetric encryption
	decKey := make([]byte, 32)

	// TODO: use decKey to encrypt encMessage as encCmdData
	encCmdData, err := aesGCMEncrypt(decKey, encMessage)
	if err != nil {
		t.Errorf("Encode AESGCM error, %v", err)
	}

	// TODO: use kcm public key to encrypt decKey as key
	kcmPublicKey, _, _ := cryptotools.DecodeKeyCertFromPEM([]byte(kcmCert))
	label := []byte("label")
	key, err := cryptotools.AsymmetricEncrypt(0x0001, 0x0000, kcmPublicKey.PublicKey, decKey, label)

	cmdData := tagCmdData {
		key:		key,
		encCmdData:	encCmdData,
	}
	outCmdData ,err := json.Marshal(cmdData)
	if err != nil {
		t.Errorf("Encode outside json of key operation error:, %v", err)
	}

	_, err = DoKeyOperation(server, &KeyOperationRequest{
		EncMessage:	outCmdData,
	})
	if err != nil {
		t.Errorf("test KeyOperation error %v", err)
	}
}

func TestClientapiWithConn(t *testing.T) {
	CreateServerConfigFile()
	defer RemoveConfigFile()

	config.LoadConfigs()
	defer RemoveFiles()
	config.HandleFlags()
	server := config.GetServerPort()

	go StartServer(server)
	defer StopServer()

	ras, err := CreateConn(server)
	if err != nil {
		t.Errorf("fail to Create connection: %v", err)
	}
	defer ReleaseConn(ras)

	EKpubBlock, _ := pem.Decode([]byte(EKpubPEM))
	reqEC := GenerateEKCertRequest{
		EkPub: EKpubBlock.Bytes,
	}
	rspEC, err := DoGenerateEKCertWithConn(ras, &reqEC)
	if err != nil {
		t.Errorf("test DoGenerateEKCertWithConn error %v", err)
	}
	IKpubBlock, _ := pem.Decode([]byte(IKpubPEM))
	_, err = DoGenerateIKCertWithConn(ras, &GenerateIKCertRequest{
		EkCert: rspEC.EkCert,
		IkPub:  IKpubBlock.Bytes,
		IkName: IKName,
	})
	if err != nil {
		t.Errorf("test DoGenerateIKCertWithConn error %v", err)
	}

	// test empty clientinfo
	ci, err := json.Marshal(map[string]string{})
	if err != nil {
		t.Error(emptyClientInfoErr)
	}
	r1, err := DoRegisterClientWithConn(ras, &RegisterClientRequest{
		Cert:       createCert(),
		ClientInfo: string(ci),
	})
	if err != nil {
		t.Errorf("test DoRegisterClientWithConn with empty clientinfo error %v", err)
	}
	defer trustmgr.DeleteClientByID(r1.GetClientId())

	// test empty request
	_, err = DoRegisterClientWithConn(ras, &RegisterClientRequest{})
	if err == nil {
		t.Errorf("test DoRegisterClientWithConn with empty request failed")
	}
	template := x509.Certificate{
		SerialNumber: big.NewInt(cryptotools.GetSerialNumber()),
		NotBefore:    time.Now(),
		NotAfter:     time.Now().AddDate(1, 0, 0),
		KeyUsage: x509.KeyUsageDigitalSignature |
			x509.KeyUsageKeyEncipherment | x509.KeyUsageCertSign,
		IsCA:           false,
		MaxPathLenZero: true,
		IPAddresses:    []net.IP{net.ParseIP(config.GetIP())},
	}
	ikCertDer, _ := cryptotools.GenerateCertificate(&template,
		config.GetPcaKeyCert(), IKpubBlock.Bytes, config.GetPcaPrivateKey())

	ci, err = json.Marshal(testClientInfo)
	if err != nil {
		t.Error(createClientInfoErr)
	}
	r2, err := DoRegisterClientWithConn(ras, &RegisterClientRequest{
		Cert:       ikCertDer,
		ClientInfo: string(ci),
	})
	if err != nil {
		t.Errorf("test DoRegisterClientWithConn error %v", err)
	}
	_, err = DoSendHeartbeatWithConn(ras, &SendHeartbeatRequest{ClientId: r2.GetClientId()})
	if err != nil {
		t.Errorf("test DoSendHeartbeatWithConn error %v", err)
	}

	// test empty clientId
	_, err = DoSendHeartbeatWithConn(ras, &SendHeartbeatRequest{})
	if err != nil {
		t.Errorf("test SendHeartbeatWithConn with empty ClientId failed")
	}

	HBrep, err := DoSendHeartbeatWithConn(ras, &SendHeartbeatRequest{ClientId: r2.GetClientId()})
	if err != nil {
		t.Errorf("test SendHeartbeatWithConn error %v", err)
	}

	// test empty report
	srRep, _ := DoSendReportWithConn(ras, &SendReportRequest{})
	if srRep.GetResult() {
		t.Errorf("test DoSendReportWithConn with empty report failed")
	}

	testbios, _ := ioutil.ReadFile(BIOSLogPath)
	testima, _ := ioutil.ReadFile(IMALogPath)
	srRep, _ = DoSendReportWithConn(ras, &SendReportRequest{
		ClientId:   r2.GetClientId(),
		Nonce:      HBrep.ClientConfig.Nonce,
		ClientInfo: string(ci),
		Quoted:     testquote,
		Signature:  testsignature,
		Manifests: []*Manifest{
			0: {Key: "pcr", Value: testpcr},
			1: {Key: "bios", Value: testbios},
			2: {Key: "ima", Value: testima},
		},
	})
	if !srRep.GetResult() {
		t.Errorf(sendrRportErr)
	}

	// test empty clientId
	_, err = DoUnregisterClientWithConn(ras, &UnregisterClientRequest{})
	if err != nil {
		t.Errorf("test DoUnregisterClientWithConn with empty clientId failed %v", err)
	}

	_, err = DoUnregisterClientWithConn(ras, &UnregisterClientRequest{
		ClientId: r2.GetClientId(),
	})
	if err != nil {
		t.Errorf("test DoUnregisterClientWithConn error %v", err)
	}
	defer trustmgr.DeleteClientByID(r2.GetClientId())
	defer trustmgr.DeleteReportByID(r2.GetClientId())
}

func TestClientapiWithConnInKC(t *testing.T) {
	server := config.GetServerPort()
	go StartServer(server)
	defer StopServer()

	ras, err := CreateConn(server)
	if err != nil {
		t.Errorf("fail to Create connection: %v", err)
	}
	defer ReleaseConn(ras)

	// test SendKCMPubKeyCert
	_, err = DoSendKCMPubKeyCertWithConn(ras, &SendKCMPubKeyCertRequest{})
	if err != nil {
		t.Errorf("test DoSendKCMPubKeyCertWithConn failed %v", err)
	}

	// test empty deviceId
	_, err = DoVerifyKTAPubKeyCertWithConn(ras, &VerifyKTAPubKeyCertRequest{})
	if err != nil {
		t.Errorf("test DoVerifyKTAPubKeyCertWithConn with empty deviceId failed %v", err)
	}

	_, err = DoVerifyKTAPubKeyCertWithConn(ras, &VerifyKTAPubKeyCertRequest{
		ClientId:		deviceId,
		KtaPubKeyCert: 	createCert(),
	})
	if err != nil {
		t.Errorf("test DoVerifyKTAPubKeyCertWithConn error %v", err)
	}

	// test empty taId
	_, err = DoKeyOperationWithConn(ras, &KeyOperationRequest{})
	if err != nil {
		t.Errorf("test DoKeyOperationWithConn with empty taId failed %v", err)
	}

	message := inKeyInfo {
		taId:		taId,
		account:	account,
		password:	password,
		keyId:		keyId,
		hostKeyId:	hostKeyId,
		command:	command,
	}
	encMessage ,err := json.Marshal(message)
	if err != nil {
		t.Errorf("Encode inside json of key operation error, %v", err)
	}

	// TODO: create Key for symmetric encryption
	decKey := make([]byte, 32)

	// TODO: use decKey to encrypt encMessage as encCmdData
	encCmdData, err := aesGCMEncrypt(decKey, encMessage)
	if err != nil {
		t.Errorf("Encode AESGCM error, %v", err)
	}

	// TODO: use kcm public key to encrypt decKey as key
	kcmPublicKey, _, _ := cryptotools.DecodeKeyCertFromPEM([]byte(kcmCert))
	label := []byte("label")
	key, err := cryptotools.AsymmetricEncrypt(0x0001, 0x0000, kcmPublicKey.PublicKey, decKey, label)

	cmdData := tagCmdData {
		key:		key,
		encCmdData:	encCmdData,
	}
	outCmdData ,err := json.Marshal(cmdData)
	if err != nil {
		t.Errorf("Encode outside json of key operation error:, %v", err)
	}

	_, err = DoKeyOperationWithConn(ras, &KeyOperationRequest{
		EncMessage:	outCmdData,
	})
	if err != nil {
		t.Errorf("test DoKeyOperationWithConn error %v", err)
	}
}

func createCert() []byte {
	max := new(big.Int).Lsh(big.NewInt(1), 128)
	serialNumber, _ := rands.Int(rands.Reader, max)
	subject := pkix.Name{
		Organization: []string{"Company"},
		Country:      []string{"China"},
		CommonName:   "test ekcert",
	}

	Template := x509.Certificate{
		SerialNumber: serialNumber,
		Subject:      subject,
		NotBefore:    time.Now(),
		NotAfter:     time.Now().AddDate(10, 0, 0),
		KeyUsage:     x509.KeyUsageDigitalSignature | x509.KeyUsageKeyEncipherment | x509.KeyUsageCertSign,
		ExtKeyUsage:  []x509.ExtKeyUsage{x509.ExtKeyUsageAny},
	}
	key, _ := rsa.GenerateKey(rands.Reader, 2048)
	cert, _ := x509.CreateCertificate(rands.Reader, &Template, &Template, &key.PublicKey, key)
	return cert
}

func RemoveFiles() {
	os.Remove("./pca-root.crt")
	os.Remove("./pca-root.key")
	os.Remove("./pca-ek.crt")
	os.Remove("./pca-ek.key")
	os.Remove("./https.crt")
	os.Remove("./https.key")
}

func aesGCMEncrypt(key, plainText []byte) ([]byte, error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, err
	}
	aesGCM, err := cipher.NewGCM(block)
	if err != nil {
		return nil, err
	}
	nonce := make([]byte, aesGCM.NonceSize())
	cipher := aesGCM.Seal(nonce, nonce, plainText, nil)
	return cipher, nil
}
