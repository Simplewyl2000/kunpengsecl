/*
Copyright (c) Huawei Technologies Co., Ltd. 2021.
kunpengsecl licensed under the Mulan PSL v2.
You can use this software according to the terms and conditions of
the Mulan PSL v2. You may obtain a copy of Mulan PSL v2 at:
    http://license.coscl.org.cn/MulanPSL2
THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
See the Mulan PSL v2 for more details.

Author: wucaijun
Create: 2021-12-08
Description:
  this package restores common structs and functions used in the project,
  don't need to invoke others.
*/

package entity

import (
	"net"
	"time"
)

// Report is a trust report used in RAS
type Report struct {
	// pcr info, view details below
	PcrInfo PcrInfo
	// Measurement list, created by RAC
	Manifest []Manifest
	ClientID int64
	// client basic info, like ip, name, etc
	ClientInfo ClientInfo
	// whether client is verified
	Verified bool
	ReportId int64
	// client info version, add 1 when update
	ClientInfoVer int
	// report time
	ReportTime time.Time
}

// RegisterClient contains client attribute
type RegisterClient struct {
	ClientID      int64
	ClientInfoVer int
	RegisterTime  time.Time
	// Attestation certificate, generated by RAS
	AkCertificate string
	// whether client is online, determined by heartbeat
	IsOnline bool
	// whether client is deleted
	IsDeleted bool
	// client base value version, add 1 when update
	BaseValueVer int
}

/*
	TransformReport is used when receiving data from RAC and after validate process,
	it will be converted to Report.
	It is used because quote verify process need client info which is json string
*/
type TransformReport struct {
	PcrInfo    PcrInfo
	Manifest   []Manifest
	ClientID   int64
	ClientInfo string
	Verified   bool
}

/*
	PcrInfo contains information of every pcr.
	Quote is signed by RAC TPM and will be decrypted for validating identity
*/
type PcrInfo struct {
	// pcr number and value
	Values map[int]string
	// pcr quote
	Quote PcrQuote
}

type PcrQuote struct {
	// quote got from tpm by RAC
	Quoted []byte
	// signature is generated by RAC
	Signature []byte
}

/*
	Manifest is a list of measurement
*/
type Manifest struct {
	// manifest type : bios or ima
	Type string
	// measurement list of corresponding types
	Items []ManifestItem
}

type ManifestItem struct {
	Name  string
	Value string
	// marshal all attribute in the original manifest to json string.
	// view more infomation in the BIOSManifestItem and IMAManifestItem below
	Detail string
}

type ClientInfo struct {
	// client info name and value map
	Info map[string]string
}

// base value info
type MeasurementInfo struct {
	ClientID int64
	// pcr base value
	PcrInfo PcrInfo
	// manifest base value
	Manifest []Measurement
}

type Measurement struct {
	// mesurement type: bios or ima
	Type  string
	Name  string
	Value string
}

// ExtractRules corresponds to basevalue-extract-rules in config
type ExtractRules struct {
	// pcr extract rule
	PcrRule PcrRule `mapstructure:"pcrinfo"`
	// manifest extract rule
	ManifestRules []ManifestRule `mapstructure:"manifest"`
}
type PcrRule struct {
	// pcr number slice which is expected to be extracted
	PcrSelection []int `mapstructure:"pcrselection"`
}
type ManifestRule struct {
	// manifest type : bios or ima
	MType string `mapstructure:"type"`
	// manifest item name which is expected to be extracted
	Name []string `mapstructure:"name"`
}

// AutoUpdateConfig corresponds to auto-update-config in config
type AutoUpdateConfig struct {
	// whether all clients need update
	IsAllUpdate bool
	// if IsAllUpdate is false, UpdateClients contains client ids which need update
	UpdateClients []int64
}

// for generating detail in ManifestItem. struct is designed according to PCG doc
type BIOSManifestItem struct {
	// pcr number
	Pcr uint32
	// bios manifest type, as known as name, corresponding name in the ManifestItem
	BType uint32
	// hash digest
	Digest DigestValues
	// data length
	DataLen uint32
	Data    string
}
type DigestValues struct {
	// digest count
	Count uint32
	// digest item
	Item []DigestItem
}
type DigestItem struct {
	// algorithm ID. it is also defined in PCG doc
	AlgID string
	// every digest value
	Item string
}

// for generating detail in ManifestItem. struct is designed according to IMA manifest file
type IMAManifestItem struct {
	// pcr number
	Pcr string
	// template hash
	TemplateHash string
	// template name
	TemplateName string
	// file data hash
	FiledataHash string
	// file name
	FilenameHint string
}

type Container struct {
	// cotainer uuid
	UUID string
	// one container belongs to one client
	ClientId     int64
	BaseValueVer int
	Online       bool
	Deleted      bool
}

type ContainerBaseValue struct {
	ContainerUUID string
	// container base value name and value map
	Value map[string]string
}

type PcieDevice struct {
	ID           int64
	ClientId     int64
	BaseValueVer int
	Online       bool
	Deleted      bool
}

type PcieBaseValue struct {
	DeviceID int64
	Value    map[string]string
}

// GetIP returns the host ipv4 address
func GetIP() (string, bool) {
	netIfs, err := net.Interfaces()
	if err != nil {
		return "", false
	}
	for i := 0; i < len(netIfs); i++ {
		if (netIfs[i].Flags & net.FlagUp) != 0 {
			addrs, _ := netIfs[i].Addrs()
			for _, addr := range addrs {
				ip, ok := addr.(*net.IPNet)
				if ok && !ip.IP.IsLoopback() && ip.IP.To4() != nil {
					return ip.IP.String(), true
				}
			}
		}
	}
	return "", false
}
