// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Servermgt_oauth2Scopes = "servermgt_oauth2.Scopes"
)

// BaseValueInfo defines model for BaseValueInfo.
type BaseValueInfo struct {
	Basetype   string `json:"basetype"`
	Bios       string `json:"bios"`
	Clientid   int64  `json:"clientid"`
	Createtime string `json:"createtime"`
	Enabled    bool   `json:"enabled"`
	Id         int64  `json:"id"`
	Ima        string `json:"ima"`
	Name       string `json:"name"`
	Pcr        string `json:"pcr"`
	Uuid       string `json:"uuid"`
}

// ReportInfo defines model for ReportInfo.
type ReportInfo struct {
	Bioslog    string `json:"bioslog"`
	Createtime string `json:"createtime"`
	Id         int64  `json:"id"`
	Imalog     string `json:"imalog"`
	Pcrlog     string `json:"pcrlog"`
	Quoted     string `json:"quoted"`
	Signature  string `json:"signature"`
	Trusted    bool   `json:"trusted"`
	Validated  bool   `json:"validated"`
}

// ServerInfo defines model for ServerInfo.
type ServerInfo struct {
	Id           int64  `json:"id"`
	Isautoupdate bool   `json:"isautoupdate"`
	Online       bool   `json:"online"`
	Registered   bool   `json:"registered"`
	Regtime      string `json:"regtime"`
	Trusted      bool   `json:"trusted"`
}

// TaBaseValueInfo defines model for TaBaseValueInfo.
type TaBaseValueInfo struct {
	Clientid   int64  `json:"clientid"`
	Createtime string `json:"createtime"`
	Enabled    bool   `json:"enabled"`
	Id         int64  `json:"id"`
	Name       string `json:"name"`
	Uuid       string `json:"uuid"`
	Valueinfo  string `json:"valueinfo"`
}

// TaReportInfo defines model for TaReportInfo.
type TaReportInfo struct {
	Createtime string `json:"createtime"`
	Id         int64  `json:"id"`
	Trusted    bool   `json:"trusted"`
	Uuid       string `json:"uuid"`
	Validated  bool   `json:"validated"`
	Value      string `json:"value"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfig request
	GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfig request
	PostConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogin request
	GetLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFromTo request
	GetFromTo(ctx context.Context, from int64, to int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteId request
	DeleteId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetId request
	GetId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostId request
	PostId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdBasevalues request
	GetIdBasevalues(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdBasevaluesBasevalueid request
	DeleteIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdBasevaluesBasevalueid request
	GetIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdBasevaluesBasevalueid request
	PostIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdContainerStatus request
	GetIdContainerStatus(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdDeviceStatus request
	GetIdDeviceStatus(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdNewbasevalue request
	GetIdNewbasevalue(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdNewbasevalue request
	PostIdNewbasevalue(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdReports request
	GetIdReports(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdReportsReportid request
	DeleteIdReportsReportid(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdReportsReportid request
	GetIdReportsReportid(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdTaTauuidNewtabasevalue request
	GetIdTaTauuidNewtabasevalue(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdTaTauuidNewtabasevalue request
	PostIdTaTauuidNewtabasevalue(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdTaTauuidStatus request
	GetIdTaTauuidStatus(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdTaTauuidTabasevalues request
	GetIdTaTauuidTabasevalues(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdTaTauuidTabasevaluesTabasevalueid request
	DeleteIdTaTauuidTabasevaluesTabasevalueid(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdTaTauuidTabasevaluesTabasevalueid request
	GetIdTaTauuidTabasevaluesTabasevalueid(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdTaTauuidTabasevaluesTabasevalueid request
	PostIdTaTauuidTabasevaluesTabasevalueid(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdTaTauuidTareports request
	GetIdTaTauuidTareports(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdTaTauuidTareportsTareportid request
	DeleteIdTaTauuidTareportsTareportid(ctx context.Context, id int64, tauuid string, tareportid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdTaTauuidTareportsTareportid request
	GetIdTaTauuidTareportsTareportid(ctx context.Context, id int64, tauuid string, tareportid int64, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFromTo(ctx context.Context, from int64, to int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFromToRequest(c.Server, from, to)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdBasevalues(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdBasevaluesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdBasevaluesBasevalueidRequest(c.Server, id, basevalueid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdBasevaluesBasevalueidRequest(c.Server, id, basevalueid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdBasevaluesBasevalueidRequest(c.Server, id, basevalueid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdContainerStatus(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdContainerStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdDeviceStatus(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdDeviceStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdNewbasevalue(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdNewbasevalueRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdNewbasevalue(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdNewbasevalueRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdReports(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdReportsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdReportsReportid(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdReportsReportidRequest(c.Server, id, reportid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdReportsReportid(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdReportsReportidRequest(c.Server, id, reportid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdTaTauuidNewtabasevalue(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdTaTauuidNewtabasevalueRequest(c.Server, id, tauuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdTaTauuidNewtabasevalue(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdTaTauuidNewtabasevalueRequest(c.Server, id, tauuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdTaTauuidStatus(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdTaTauuidStatusRequest(c.Server, id, tauuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdTaTauuidTabasevalues(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdTaTauuidTabasevaluesRequest(c.Server, id, tauuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdTaTauuidTabasevaluesTabasevalueid(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdTaTauuidTabasevaluesTabasevalueidRequest(c.Server, id, tauuid, tabasevalueid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdTaTauuidTabasevaluesTabasevalueid(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdTaTauuidTabasevaluesTabasevalueidRequest(c.Server, id, tauuid, tabasevalueid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdTaTauuidTabasevaluesTabasevalueid(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdTaTauuidTabasevaluesTabasevalueidRequest(c.Server, id, tauuid, tabasevalueid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdTaTauuidTareports(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdTaTauuidTareportsRequest(c.Server, id, tauuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdTaTauuidTareportsTareportid(ctx context.Context, id int64, tauuid string, tareportid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdTaTauuidTareportsTareportidRequest(c.Server, id, tauuid, tareportid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdTaTauuidTareportsTareportid(ctx context.Context, id int64, tauuid string, tareportid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdTaTauuidTareportsTareportidRequest(c.Server, id, tauuid, tareportid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConfigRequest generates requests for PostConfig
func NewPostConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLoginRequest generates requests for GetLogin
func NewGetLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFromToRequest generates requests for GetFromTo
func NewGetFromToRequest(server string, from int64, to int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "from", runtime.ParamLocationPath, from)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "to", runtime.ParamLocationPath, to)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIdRequest generates requests for DeleteId
func NewDeleteIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdRequest generates requests for GetId
func NewGetIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdRequest generates requests for PostId
func NewPostIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdBasevaluesRequest generates requests for GetIdBasevalues
func NewGetIdBasevaluesRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/basevalues", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIdBasevaluesBasevalueidRequest generates requests for DeleteIdBasevaluesBasevalueid
func NewDeleteIdBasevaluesBasevalueidRequest(server string, id int64, basevalueid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, basevalueid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/basevalues/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdBasevaluesBasevalueidRequest generates requests for GetIdBasevaluesBasevalueid
func NewGetIdBasevaluesBasevalueidRequest(server string, id int64, basevalueid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, basevalueid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/basevalues/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdBasevaluesBasevalueidRequest generates requests for PostIdBasevaluesBasevalueid
func NewPostIdBasevaluesBasevalueidRequest(server string, id int64, basevalueid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, basevalueid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/basevalues/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdContainerStatusRequest generates requests for GetIdContainerStatus
func NewGetIdContainerStatusRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/container/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdDeviceStatusRequest generates requests for GetIdDeviceStatus
func NewGetIdDeviceStatusRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/device/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdNewbasevalueRequest generates requests for GetIdNewbasevalue
func NewGetIdNewbasevalueRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/newbasevalue", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdNewbasevalueRequest generates requests for PostIdNewbasevalue
func NewPostIdNewbasevalueRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/newbasevalue", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdReportsRequest generates requests for GetIdReports
func NewGetIdReportsRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/reports", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIdReportsReportidRequest generates requests for DeleteIdReportsReportid
func NewDeleteIdReportsReportidRequest(server string, id int64, reportid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reportid", runtime.ParamLocationPath, reportid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/reports/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdReportsReportidRequest generates requests for GetIdReportsReportid
func NewGetIdReportsReportidRequest(server string, id int64, reportid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reportid", runtime.ParamLocationPath, reportid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/reports/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdTaTauuidNewtabasevalueRequest generates requests for GetIdTaTauuidNewtabasevalue
func NewGetIdTaTauuidNewtabasevalueRequest(server string, id int64, tauuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, tauuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ta/%s/newtabasevalue", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdTaTauuidNewtabasevalueRequest generates requests for PostIdTaTauuidNewtabasevalue
func NewPostIdTaTauuidNewtabasevalueRequest(server string, id int64, tauuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, tauuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ta/%s/newtabasevalue", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdTaTauuidStatusRequest generates requests for GetIdTaTauuidStatus
func NewGetIdTaTauuidStatusRequest(server string, id int64, tauuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, tauuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ta/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdTaTauuidTabasevaluesRequest generates requests for GetIdTaTauuidTabasevalues
func NewGetIdTaTauuidTabasevaluesRequest(server string, id int64, tauuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, tauuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ta/%s/tabasevalues", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIdTaTauuidTabasevaluesTabasevalueidRequest generates requests for DeleteIdTaTauuidTabasevaluesTabasevalueid
func NewDeleteIdTaTauuidTabasevaluesTabasevalueidRequest(server string, id int64, tauuid string, tabasevalueid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, tauuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tabasevalueid", runtime.ParamLocationPath, tabasevalueid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ta/%s/tabasevalues/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdTaTauuidTabasevaluesTabasevalueidRequest generates requests for GetIdTaTauuidTabasevaluesTabasevalueid
func NewGetIdTaTauuidTabasevaluesTabasevalueidRequest(server string, id int64, tauuid string, tabasevalueid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, tauuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tabasevalueid", runtime.ParamLocationPath, tabasevalueid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ta/%s/tabasevalues/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdTaTauuidTabasevaluesTabasevalueidRequest generates requests for PostIdTaTauuidTabasevaluesTabasevalueid
func NewPostIdTaTauuidTabasevaluesTabasevalueidRequest(server string, id int64, tauuid string, tabasevalueid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, tauuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tabasevalueid", runtime.ParamLocationPath, tabasevalueid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ta/%s/tabasevalues/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdTaTauuidTareportsRequest generates requests for GetIdTaTauuidTareports
func NewGetIdTaTauuidTareportsRequest(server string, id int64, tauuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, tauuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ta/%s/tareports", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIdTaTauuidTareportsTareportidRequest generates requests for DeleteIdTaTauuidTareportsTareportid
func NewDeleteIdTaTauuidTareportsTareportidRequest(server string, id int64, tauuid string, tareportid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, tauuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tareportid", runtime.ParamLocationPath, tareportid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ta/%s/tareports/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdTaTauuidTareportsTareportidRequest generates requests for GetIdTaTauuidTareportsTareportid
func NewGetIdTaTauuidTareportsTareportidRequest(server string, id int64, tauuid string, tareportid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, tauuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "tareportid", runtime.ParamLocationPath, tareportid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/ta/%s/tareports/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// GetConfig request
	GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error)

	// PostConfig request
	PostConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostConfigResponse, error)

	// GetLogin request
	GetLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoginResponse, error)

	// GetVersion request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)

	// GetFromTo request
	GetFromToWithResponse(ctx context.Context, from int64, to int64, reqEditors ...RequestEditorFn) (*GetFromToResponse, error)

	// DeleteId request
	DeleteIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteIdResponse, error)

	// GetId request
	GetIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdResponse, error)

	// PostId request
	PostIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostIdResponse, error)

	// GetIdBasevalues request
	GetIdBasevaluesWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdBasevaluesResponse, error)

	// DeleteIdBasevaluesBasevalueid request
	DeleteIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*DeleteIdBasevaluesBasevalueidResponse, error)

	// GetIdBasevaluesBasevalueid request
	GetIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*GetIdBasevaluesBasevalueidResponse, error)

	// PostIdBasevaluesBasevalueid request
	PostIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*PostIdBasevaluesBasevalueidResponse, error)

	// GetIdContainerStatus request
	GetIdContainerStatusWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdContainerStatusResponse, error)

	// GetIdDeviceStatus request
	GetIdDeviceStatusWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdDeviceStatusResponse, error)

	// GetIdNewbasevalue request
	GetIdNewbasevalueWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdNewbasevalueResponse, error)

	// PostIdNewbasevalue request
	PostIdNewbasevalueWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostIdNewbasevalueResponse, error)

	// GetIdReports request
	GetIdReportsWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdReportsResponse, error)

	// DeleteIdReportsReportid request
	DeleteIdReportsReportidWithResponse(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*DeleteIdReportsReportidResponse, error)

	// GetIdReportsReportid request
	GetIdReportsReportidWithResponse(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*GetIdReportsReportidResponse, error)

	// GetIdTaTauuidNewtabasevalue request
	GetIdTaTauuidNewtabasevalueWithResponse(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*GetIdTaTauuidNewtabasevalueResponse, error)

	// PostIdTaTauuidNewtabasevalue request
	PostIdTaTauuidNewtabasevalueWithResponse(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*PostIdTaTauuidNewtabasevalueResponse, error)

	// GetIdTaTauuidStatus request
	GetIdTaTauuidStatusWithResponse(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*GetIdTaTauuidStatusResponse, error)

	// GetIdTaTauuidTabasevalues request
	GetIdTaTauuidTabasevaluesWithResponse(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*GetIdTaTauuidTabasevaluesResponse, error)

	// DeleteIdTaTauuidTabasevaluesTabasevalueid request
	DeleteIdTaTauuidTabasevaluesTabasevalueidWithResponse(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*DeleteIdTaTauuidTabasevaluesTabasevalueidResponse, error)

	// GetIdTaTauuidTabasevaluesTabasevalueid request
	GetIdTaTauuidTabasevaluesTabasevalueidWithResponse(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*GetIdTaTauuidTabasevaluesTabasevalueidResponse, error)

	// PostIdTaTauuidTabasevaluesTabasevalueid request
	PostIdTaTauuidTabasevaluesTabasevalueidWithResponse(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*PostIdTaTauuidTabasevaluesTabasevalueidResponse, error)

	// GetIdTaTauuidTareports request
	GetIdTaTauuidTareportsWithResponse(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*GetIdTaTauuidTareportsResponse, error)

	// DeleteIdTaTauuidTareportsTareportid request
	DeleteIdTaTauuidTareportsTareportidWithResponse(ctx context.Context, id int64, tauuid string, tareportid int64, reqEditors ...RequestEditorFn) (*DeleteIdTaTauuidTareportsTareportidResponse, error)

	// GetIdTaTauuidTareportsTareportid request
	GetIdTaTauuidTareportsTareportidWithResponse(ctx context.Context, id int64, tauuid string, tareportid int64, reqEditors ...RequestEditorFn) (*GetIdTaTauuidTareportsTareportidResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ServerInfo
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFromToResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ServerInfo
}

// Status returns HTTPResponse.Status
func (r GetFromToResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFromToResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdBasevaluesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BaseValueInfo
}

// Status returns HTTPResponse.Status
func (r GetIdBasevaluesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdBasevaluesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdBasevaluesBasevalueidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdBasevaluesBasevalueidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdBasevaluesBasevalueidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdBasevaluesBasevalueidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetIdBasevaluesBasevalueidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdBasevaluesBasevalueidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdBasevaluesBasevalueidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdBasevaluesBasevalueidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdBasevaluesBasevalueidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdContainerStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdContainerStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdContainerStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdDeviceStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdDeviceStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdDeviceStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdNewbasevalueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BaseValueInfo
}

// Status returns HTTPResponse.Status
func (r GetIdNewbasevalueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdNewbasevalueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdNewbasevalueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdNewbasevalueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdNewbasevalueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReportInfo
}

// Status returns HTTPResponse.Status
func (r GetIdReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdReportsReportidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdReportsReportidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdReportsReportidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdReportsReportidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetIdReportsReportidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdReportsReportidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdTaTauuidNewtabasevalueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TaBaseValueInfo
}

// Status returns HTTPResponse.Status
func (r GetIdTaTauuidNewtabasevalueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdTaTauuidNewtabasevalueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdTaTauuidNewtabasevalueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdTaTauuidNewtabasevalueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdTaTauuidNewtabasevalueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdTaTauuidStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIdTaTauuidStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdTaTauuidStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdTaTauuidTabasevaluesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TaBaseValueInfo
}

// Status returns HTTPResponse.Status
func (r GetIdTaTauuidTabasevaluesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdTaTauuidTabasevaluesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdTaTauuidTabasevaluesTabasevalueidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdTaTauuidTabasevaluesTabasevalueidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdTaTauuidTabasevaluesTabasevalueidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdTaTauuidTabasevaluesTabasevalueidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetIdTaTauuidTabasevaluesTabasevalueidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdTaTauuidTabasevaluesTabasevalueidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdTaTauuidTabasevaluesTabasevalueidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdTaTauuidTabasevaluesTabasevalueidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdTaTauuidTabasevaluesTabasevalueidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdTaTauuidTareportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TaReportInfo
}

// Status returns HTTPResponse.Status
func (r GetIdTaTauuidTareportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdTaTauuidTareportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdTaTauuidTareportsTareportidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdTaTauuidTareportsTareportidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdTaTauuidTareportsTareportidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdTaTauuidTareportsTareportidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetIdTaTauuidTareportsTareportidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdTaTauuidTareportsTareportidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// PostConfigWithResponse request returning *PostConfigResponse
func (c *ClientWithResponses) PostConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostConfigResponse, error) {
	rsp, err := c.PostConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigResponse(rsp)
}

// GetLoginWithResponse request returning *GetLoginResponse
func (c *ClientWithResponses) GetLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLoginResponse, error) {
	rsp, err := c.GetLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLoginResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// GetFromToWithResponse request returning *GetFromToResponse
func (c *ClientWithResponses) GetFromToWithResponse(ctx context.Context, from int64, to int64, reqEditors ...RequestEditorFn) (*GetFromToResponse, error) {
	rsp, err := c.GetFromTo(ctx, from, to, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFromToResponse(rsp)
}

// DeleteIdWithResponse request returning *DeleteIdResponse
func (c *ClientWithResponses) DeleteIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteIdResponse, error) {
	rsp, err := c.DeleteId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdResponse(rsp)
}

// GetIdWithResponse request returning *GetIdResponse
func (c *ClientWithResponses) GetIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdResponse, error) {
	rsp, err := c.GetId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdResponse(rsp)
}

// PostIdWithResponse request returning *PostIdResponse
func (c *ClientWithResponses) PostIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostIdResponse, error) {
	rsp, err := c.PostId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdResponse(rsp)
}

// GetIdBasevaluesWithResponse request returning *GetIdBasevaluesResponse
func (c *ClientWithResponses) GetIdBasevaluesWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdBasevaluesResponse, error) {
	rsp, err := c.GetIdBasevalues(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdBasevaluesResponse(rsp)
}

// DeleteIdBasevaluesBasevalueidWithResponse request returning *DeleteIdBasevaluesBasevalueidResponse
func (c *ClientWithResponses) DeleteIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*DeleteIdBasevaluesBasevalueidResponse, error) {
	rsp, err := c.DeleteIdBasevaluesBasevalueid(ctx, id, basevalueid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdBasevaluesBasevalueidResponse(rsp)
}

// GetIdBasevaluesBasevalueidWithResponse request returning *GetIdBasevaluesBasevalueidResponse
func (c *ClientWithResponses) GetIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*GetIdBasevaluesBasevalueidResponse, error) {
	rsp, err := c.GetIdBasevaluesBasevalueid(ctx, id, basevalueid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdBasevaluesBasevalueidResponse(rsp)
}

// PostIdBasevaluesBasevalueidWithResponse request returning *PostIdBasevaluesBasevalueidResponse
func (c *ClientWithResponses) PostIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*PostIdBasevaluesBasevalueidResponse, error) {
	rsp, err := c.PostIdBasevaluesBasevalueid(ctx, id, basevalueid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdBasevaluesBasevalueidResponse(rsp)
}

// GetIdContainerStatusWithResponse request returning *GetIdContainerStatusResponse
func (c *ClientWithResponses) GetIdContainerStatusWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdContainerStatusResponse, error) {
	rsp, err := c.GetIdContainerStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdContainerStatusResponse(rsp)
}

// GetIdDeviceStatusWithResponse request returning *GetIdDeviceStatusResponse
func (c *ClientWithResponses) GetIdDeviceStatusWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdDeviceStatusResponse, error) {
	rsp, err := c.GetIdDeviceStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdDeviceStatusResponse(rsp)
}

// GetIdNewbasevalueWithResponse request returning *GetIdNewbasevalueResponse
func (c *ClientWithResponses) GetIdNewbasevalueWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdNewbasevalueResponse, error) {
	rsp, err := c.GetIdNewbasevalue(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdNewbasevalueResponse(rsp)
}

// PostIdNewbasevalueWithResponse request returning *PostIdNewbasevalueResponse
func (c *ClientWithResponses) PostIdNewbasevalueWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostIdNewbasevalueResponse, error) {
	rsp, err := c.PostIdNewbasevalue(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdNewbasevalueResponse(rsp)
}

// GetIdReportsWithResponse request returning *GetIdReportsResponse
func (c *ClientWithResponses) GetIdReportsWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdReportsResponse, error) {
	rsp, err := c.GetIdReports(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdReportsResponse(rsp)
}

// DeleteIdReportsReportidWithResponse request returning *DeleteIdReportsReportidResponse
func (c *ClientWithResponses) DeleteIdReportsReportidWithResponse(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*DeleteIdReportsReportidResponse, error) {
	rsp, err := c.DeleteIdReportsReportid(ctx, id, reportid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdReportsReportidResponse(rsp)
}

// GetIdReportsReportidWithResponse request returning *GetIdReportsReportidResponse
func (c *ClientWithResponses) GetIdReportsReportidWithResponse(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*GetIdReportsReportidResponse, error) {
	rsp, err := c.GetIdReportsReportid(ctx, id, reportid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdReportsReportidResponse(rsp)
}

// GetIdTaTauuidNewtabasevalueWithResponse request returning *GetIdTaTauuidNewtabasevalueResponse
func (c *ClientWithResponses) GetIdTaTauuidNewtabasevalueWithResponse(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*GetIdTaTauuidNewtabasevalueResponse, error) {
	rsp, err := c.GetIdTaTauuidNewtabasevalue(ctx, id, tauuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdTaTauuidNewtabasevalueResponse(rsp)
}

// PostIdTaTauuidNewtabasevalueWithResponse request returning *PostIdTaTauuidNewtabasevalueResponse
func (c *ClientWithResponses) PostIdTaTauuidNewtabasevalueWithResponse(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*PostIdTaTauuidNewtabasevalueResponse, error) {
	rsp, err := c.PostIdTaTauuidNewtabasevalue(ctx, id, tauuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdTaTauuidNewtabasevalueResponse(rsp)
}

// GetIdTaTauuidStatusWithResponse request returning *GetIdTaTauuidStatusResponse
func (c *ClientWithResponses) GetIdTaTauuidStatusWithResponse(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*GetIdTaTauuidStatusResponse, error) {
	rsp, err := c.GetIdTaTauuidStatus(ctx, id, tauuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdTaTauuidStatusResponse(rsp)
}

// GetIdTaTauuidTabasevaluesWithResponse request returning *GetIdTaTauuidTabasevaluesResponse
func (c *ClientWithResponses) GetIdTaTauuidTabasevaluesWithResponse(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*GetIdTaTauuidTabasevaluesResponse, error) {
	rsp, err := c.GetIdTaTauuidTabasevalues(ctx, id, tauuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdTaTauuidTabasevaluesResponse(rsp)
}

// DeleteIdTaTauuidTabasevaluesTabasevalueidWithResponse request returning *DeleteIdTaTauuidTabasevaluesTabasevalueidResponse
func (c *ClientWithResponses) DeleteIdTaTauuidTabasevaluesTabasevalueidWithResponse(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*DeleteIdTaTauuidTabasevaluesTabasevalueidResponse, error) {
	rsp, err := c.DeleteIdTaTauuidTabasevaluesTabasevalueid(ctx, id, tauuid, tabasevalueid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdTaTauuidTabasevaluesTabasevalueidResponse(rsp)
}

// GetIdTaTauuidTabasevaluesTabasevalueidWithResponse request returning *GetIdTaTauuidTabasevaluesTabasevalueidResponse
func (c *ClientWithResponses) GetIdTaTauuidTabasevaluesTabasevalueidWithResponse(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*GetIdTaTauuidTabasevaluesTabasevalueidResponse, error) {
	rsp, err := c.GetIdTaTauuidTabasevaluesTabasevalueid(ctx, id, tauuid, tabasevalueid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdTaTauuidTabasevaluesTabasevalueidResponse(rsp)
}

// PostIdTaTauuidTabasevaluesTabasevalueidWithResponse request returning *PostIdTaTauuidTabasevaluesTabasevalueidResponse
func (c *ClientWithResponses) PostIdTaTauuidTabasevaluesTabasevalueidWithResponse(ctx context.Context, id int64, tauuid string, tabasevalueid int64, reqEditors ...RequestEditorFn) (*PostIdTaTauuidTabasevaluesTabasevalueidResponse, error) {
	rsp, err := c.PostIdTaTauuidTabasevaluesTabasevalueid(ctx, id, tauuid, tabasevalueid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdTaTauuidTabasevaluesTabasevalueidResponse(rsp)
}

// GetIdTaTauuidTareportsWithResponse request returning *GetIdTaTauuidTareportsResponse
func (c *ClientWithResponses) GetIdTaTauuidTareportsWithResponse(ctx context.Context, id int64, tauuid string, reqEditors ...RequestEditorFn) (*GetIdTaTauuidTareportsResponse, error) {
	rsp, err := c.GetIdTaTauuidTareports(ctx, id, tauuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdTaTauuidTareportsResponse(rsp)
}

// DeleteIdTaTauuidTareportsTareportidWithResponse request returning *DeleteIdTaTauuidTareportsTareportidResponse
func (c *ClientWithResponses) DeleteIdTaTauuidTareportsTareportidWithResponse(ctx context.Context, id int64, tauuid string, tareportid int64, reqEditors ...RequestEditorFn) (*DeleteIdTaTauuidTareportsTareportidResponse, error) {
	rsp, err := c.DeleteIdTaTauuidTareportsTareportid(ctx, id, tauuid, tareportid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdTaTauuidTareportsTareportidResponse(rsp)
}

// GetIdTaTauuidTareportsTareportidWithResponse request returning *GetIdTaTauuidTareportsTareportidResponse
func (c *ClientWithResponses) GetIdTaTauuidTareportsTareportidWithResponse(ctx context.Context, id int64, tauuid string, tareportid int64, reqEditors ...RequestEditorFn) (*GetIdTaTauuidTareportsTareportidResponse, error) {
	rsp, err := c.GetIdTaTauuidTareportsTareportid(ctx, id, tauuid, tareportid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdTaTauuidTareportsTareportidResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ServerInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostConfigResponse parses an HTTP response from a PostConfigWithResponse call
func ParsePostConfigResponse(rsp *http.Response) (*PostConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLoginResponse parses an HTTP response from a GetLoginWithResponse call
func ParseGetLoginResponse(rsp *http.Response) (*GetLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetFromToResponse parses an HTTP response from a GetFromToWithResponse call
func ParseGetFromToResponse(rsp *http.Response) (*GetFromToResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFromToResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ServerInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteIdResponse parses an HTTP response from a DeleteIdWithResponse call
func ParseDeleteIdResponse(rsp *http.Response) (*DeleteIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdResponse parses an HTTP response from a GetIdWithResponse call
func ParseGetIdResponse(rsp *http.Response) (*GetIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostIdResponse parses an HTTP response from a PostIdWithResponse call
func ParsePostIdResponse(rsp *http.Response) (*PostIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdBasevaluesResponse parses an HTTP response from a GetIdBasevaluesWithResponse call
func ParseGetIdBasevaluesResponse(rsp *http.Response) (*GetIdBasevaluesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdBasevaluesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BaseValueInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteIdBasevaluesBasevalueidResponse parses an HTTP response from a DeleteIdBasevaluesBasevalueidWithResponse call
func ParseDeleteIdBasevaluesBasevalueidResponse(rsp *http.Response) (*DeleteIdBasevaluesBasevalueidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdBasevaluesBasevalueidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdBasevaluesBasevalueidResponse parses an HTTP response from a GetIdBasevaluesBasevalueidWithResponse call
func ParseGetIdBasevaluesBasevalueidResponse(rsp *http.Response) (*GetIdBasevaluesBasevalueidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdBasevaluesBasevalueidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostIdBasevaluesBasevalueidResponse parses an HTTP response from a PostIdBasevaluesBasevalueidWithResponse call
func ParsePostIdBasevaluesBasevalueidResponse(rsp *http.Response) (*PostIdBasevaluesBasevalueidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdBasevaluesBasevalueidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdContainerStatusResponse parses an HTTP response from a GetIdContainerStatusWithResponse call
func ParseGetIdContainerStatusResponse(rsp *http.Response) (*GetIdContainerStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdContainerStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdDeviceStatusResponse parses an HTTP response from a GetIdDeviceStatusWithResponse call
func ParseGetIdDeviceStatusResponse(rsp *http.Response) (*GetIdDeviceStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdDeviceStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdNewbasevalueResponse parses an HTTP response from a GetIdNewbasevalueWithResponse call
func ParseGetIdNewbasevalueResponse(rsp *http.Response) (*GetIdNewbasevalueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdNewbasevalueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BaseValueInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostIdNewbasevalueResponse parses an HTTP response from a PostIdNewbasevalueWithResponse call
func ParsePostIdNewbasevalueResponse(rsp *http.Response) (*PostIdNewbasevalueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdNewbasevalueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdReportsResponse parses an HTTP response from a GetIdReportsWithResponse call
func ParseGetIdReportsResponse(rsp *http.Response) (*GetIdReportsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReportInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteIdReportsReportidResponse parses an HTTP response from a DeleteIdReportsReportidWithResponse call
func ParseDeleteIdReportsReportidResponse(rsp *http.Response) (*DeleteIdReportsReportidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdReportsReportidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdReportsReportidResponse parses an HTTP response from a GetIdReportsReportidWithResponse call
func ParseGetIdReportsReportidResponse(rsp *http.Response) (*GetIdReportsReportidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdReportsReportidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetIdTaTauuidNewtabasevalueResponse parses an HTTP response from a GetIdTaTauuidNewtabasevalueWithResponse call
func ParseGetIdTaTauuidNewtabasevalueResponse(rsp *http.Response) (*GetIdTaTauuidNewtabasevalueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdTaTauuidNewtabasevalueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TaBaseValueInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostIdTaTauuidNewtabasevalueResponse parses an HTTP response from a PostIdTaTauuidNewtabasevalueWithResponse call
func ParsePostIdTaTauuidNewtabasevalueResponse(rsp *http.Response) (*PostIdTaTauuidNewtabasevalueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdTaTauuidNewtabasevalueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdTaTauuidStatusResponse parses an HTTP response from a GetIdTaTauuidStatusWithResponse call
func ParseGetIdTaTauuidStatusResponse(rsp *http.Response) (*GetIdTaTauuidStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdTaTauuidStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdTaTauuidTabasevaluesResponse parses an HTTP response from a GetIdTaTauuidTabasevaluesWithResponse call
func ParseGetIdTaTauuidTabasevaluesResponse(rsp *http.Response) (*GetIdTaTauuidTabasevaluesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdTaTauuidTabasevaluesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TaBaseValueInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteIdTaTauuidTabasevaluesTabasevalueidResponse parses an HTTP response from a DeleteIdTaTauuidTabasevaluesTabasevalueidWithResponse call
func ParseDeleteIdTaTauuidTabasevaluesTabasevalueidResponse(rsp *http.Response) (*DeleteIdTaTauuidTabasevaluesTabasevalueidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdTaTauuidTabasevaluesTabasevalueidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdTaTauuidTabasevaluesTabasevalueidResponse parses an HTTP response from a GetIdTaTauuidTabasevaluesTabasevalueidWithResponse call
func ParseGetIdTaTauuidTabasevaluesTabasevalueidResponse(rsp *http.Response) (*GetIdTaTauuidTabasevaluesTabasevalueidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdTaTauuidTabasevaluesTabasevalueidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostIdTaTauuidTabasevaluesTabasevalueidResponse parses an HTTP response from a PostIdTaTauuidTabasevaluesTabasevalueidWithResponse call
func ParsePostIdTaTauuidTabasevaluesTabasevalueidResponse(rsp *http.Response) (*PostIdTaTauuidTabasevaluesTabasevalueidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdTaTauuidTabasevaluesTabasevalueidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdTaTauuidTareportsResponse parses an HTTP response from a GetIdTaTauuidTareportsWithResponse call
func ParseGetIdTaTauuidTareportsResponse(rsp *http.Response) (*GetIdTaTauuidTareportsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdTaTauuidTareportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TaReportInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteIdTaTauuidTareportsTareportidResponse parses an HTTP response from a DeleteIdTaTauuidTareportsTareportidWithResponse call
func ParseDeleteIdTaTauuidTareportsTareportidResponse(rsp *http.Response) (*DeleteIdTaTauuidTareportsTareportidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdTaTauuidTareportsTareportidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdTaTauuidTareportsTareportidResponse parses an HTTP response from a GetIdTaTauuidTareportsTareportidWithResponse call
func ParseGetIdTaTauuidTareportsTareportidResponse(rsp *http.Response) (*GetIdTaTauuidTareportsTareportidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdTaTauuidTareportsTareportidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	Get(ctx echo.Context) error

	// (GET /config)
	GetConfig(ctx echo.Context) error

	// (POST /config)
	PostConfig(ctx echo.Context) error

	// (GET /login)
	GetLogin(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error

	// (GET /{from}/{to})
	GetFromTo(ctx echo.Context, from int64, to int64) error

	// (DELETE /{id})
	DeleteId(ctx echo.Context, id int64) error

	// (GET /{id})
	GetId(ctx echo.Context, id int64) error

	// (POST /{id})
	PostId(ctx echo.Context, id int64) error

	// (GET /{id}/basevalues)
	GetIdBasevalues(ctx echo.Context, id int64) error

	// (DELETE /{id}/basevalues/{basevalueid})
	DeleteIdBasevaluesBasevalueid(ctx echo.Context, id int64, basevalueid int64) error

	// (GET /{id}/basevalues/{basevalueid})
	GetIdBasevaluesBasevalueid(ctx echo.Context, id int64, basevalueid int64) error

	// (POST /{id}/basevalues/{basevalueid})
	PostIdBasevaluesBasevalueid(ctx echo.Context, id int64, basevalueid int64) error
	// Return a list of trust status for all containers of a given client
	// (GET /{id}/container/status)
	GetIdContainerStatus(ctx echo.Context, id int64) error
	// Return a list of trust status for all devices of a given client
	// (GET /{id}/device/status)
	GetIdDeviceStatus(ctx echo.Context, id int64) error

	// (GET /{id}/newbasevalue)
	GetIdNewbasevalue(ctx echo.Context, id int64) error

	// (POST /{id}/newbasevalue)
	PostIdNewbasevalue(ctx echo.Context, id int64) error

	// (GET /{id}/reports)
	GetIdReports(ctx echo.Context, id int64) error

	// (DELETE /{id}/reports/{reportid})
	DeleteIdReportsReportid(ctx echo.Context, id int64, reportid int64) error

	// (GET /{id}/reports/{reportid})
	GetIdReportsReportid(ctx echo.Context, id int64, reportid int64) error

	// (GET /{id}/ta/{tauuid}/newtabasevalue)
	GetIdTaTauuidNewtabasevalue(ctx echo.Context, id int64, tauuid string) error

	// (POST /{id}/ta/{tauuid}/newtabasevalue)
	PostIdTaTauuidNewtabasevalue(ctx echo.Context, id int64, tauuid string) error
	// Return the trust status for a specific TA of a given client
	// (GET /{id}/ta/{tauuid}/status)
	GetIdTaTauuidStatus(ctx echo.Context, id int64, tauuid string) error

	// (GET /{id}/ta/{tauuid}/tabasevalues)
	GetIdTaTauuidTabasevalues(ctx echo.Context, id int64, tauuid string) error

	// (DELETE /{id}/ta/{tauuid}/tabasevalues/{tabasevalueid})
	DeleteIdTaTauuidTabasevaluesTabasevalueid(ctx echo.Context, id int64, tauuid string, tabasevalueid int64) error

	// (GET /{id}/ta/{tauuid}/tabasevalues/{tabasevalueid})
	GetIdTaTauuidTabasevaluesTabasevalueid(ctx echo.Context, id int64, tauuid string, tabasevalueid int64) error

	// (POST /{id}/ta/{tauuid}/tabasevalues/{tabasevalueid})
	PostIdTaTauuidTabasevaluesTabasevalueid(ctx echo.Context, id int64, tauuid string, tabasevalueid int64) error

	// (GET /{id}/ta/{tauuid}/tareports)
	GetIdTaTauuidTareports(ctx echo.Context, id int64, tauuid string) error

	// (DELETE /{id}/ta/{tauuid}/tareports/{tareportid})
	DeleteIdTaTauuidTareportsTareportid(ctx echo.Context, id int64, tauuid string, tareportid int64) error

	// (GET /{id}/ta/{tauuid}/tareports/{tareportid})
	GetIdTaTauuidTareportsTareportid(ctx echo.Context, id int64, tauuid string, tareportid int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetLogin converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLogin(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// GetFromTo converts echo context to params.
func (w *ServerInterfaceWrapper) GetFromTo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "from" -------------
	var from int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "from", runtime.ParamLocationPath, ctx.Param("from"), &from)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Path parameter "to" -------------
	var to int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "to", runtime.ParamLocationPath, ctx.Param("to"), &to)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFromTo(ctx, from, to)
	return err
}

// DeleteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteId(ctx, id)
	return err
}

// GetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetId(ctx, id)
	return err
}

// PostId converts echo context to params.
func (w *ServerInterfaceWrapper) PostId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostId(ctx, id)
	return err
}

// GetIdBasevalues converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdBasevalues(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdBasevalues(ctx, id)
	return err
}

// DeleteIdBasevaluesBasevalueid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdBasevaluesBasevalueid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "basevalueid" -------------
	var basevalueid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, ctx.Param("basevalueid"), &basevalueid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter basevalueid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdBasevaluesBasevalueid(ctx, id, basevalueid)
	return err
}

// GetIdBasevaluesBasevalueid converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdBasevaluesBasevalueid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "basevalueid" -------------
	var basevalueid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, ctx.Param("basevalueid"), &basevalueid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter basevalueid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdBasevaluesBasevalueid(ctx, id, basevalueid)
	return err
}

// PostIdBasevaluesBasevalueid converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdBasevaluesBasevalueid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "basevalueid" -------------
	var basevalueid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, ctx.Param("basevalueid"), &basevalueid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter basevalueid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdBasevaluesBasevalueid(ctx, id, basevalueid)
	return err
}

// GetIdContainerStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdContainerStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdContainerStatus(ctx, id)
	return err
}

// GetIdDeviceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdDeviceStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdDeviceStatus(ctx, id)
	return err
}

// GetIdNewbasevalue converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdNewbasevalue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdNewbasevalue(ctx, id)
	return err
}

// PostIdNewbasevalue converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdNewbasevalue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdNewbasevalue(ctx, id)
	return err
}

// GetIdReports converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdReports(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdReports(ctx, id)
	return err
}

// DeleteIdReportsReportid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdReportsReportid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "reportid" -------------
	var reportid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "reportid", runtime.ParamLocationPath, ctx.Param("reportid"), &reportid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reportid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdReportsReportid(ctx, id, reportid)
	return err
}

// GetIdReportsReportid converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdReportsReportid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "reportid" -------------
	var reportid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "reportid", runtime.ParamLocationPath, ctx.Param("reportid"), &reportid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reportid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdReportsReportid(ctx, id, reportid)
	return err
}

// GetIdTaTauuidNewtabasevalue converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdTaTauuidNewtabasevalue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tauuid" -------------
	var tauuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, ctx.Param("tauuid"), &tauuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tauuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdTaTauuidNewtabasevalue(ctx, id, tauuid)
	return err
}

// PostIdTaTauuidNewtabasevalue converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdTaTauuidNewtabasevalue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tauuid" -------------
	var tauuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, ctx.Param("tauuid"), &tauuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tauuid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdTaTauuidNewtabasevalue(ctx, id, tauuid)
	return err
}

// GetIdTaTauuidStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdTaTauuidStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tauuid" -------------
	var tauuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, ctx.Param("tauuid"), &tauuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tauuid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdTaTauuidStatus(ctx, id, tauuid)
	return err
}

// GetIdTaTauuidTabasevalues converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdTaTauuidTabasevalues(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tauuid" -------------
	var tauuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, ctx.Param("tauuid"), &tauuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tauuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdTaTauuidTabasevalues(ctx, id, tauuid)
	return err
}

// DeleteIdTaTauuidTabasevaluesTabasevalueid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdTaTauuidTabasevaluesTabasevalueid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tauuid" -------------
	var tauuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, ctx.Param("tauuid"), &tauuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tauuid: %s", err))
	}

	// ------------- Path parameter "tabasevalueid" -------------
	var tabasevalueid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "tabasevalueid", runtime.ParamLocationPath, ctx.Param("tabasevalueid"), &tabasevalueid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tabasevalueid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdTaTauuidTabasevaluesTabasevalueid(ctx, id, tauuid, tabasevalueid)
	return err
}

// GetIdTaTauuidTabasevaluesTabasevalueid converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdTaTauuidTabasevaluesTabasevalueid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tauuid" -------------
	var tauuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, ctx.Param("tauuid"), &tauuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tauuid: %s", err))
	}

	// ------------- Path parameter "tabasevalueid" -------------
	var tabasevalueid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "tabasevalueid", runtime.ParamLocationPath, ctx.Param("tabasevalueid"), &tabasevalueid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tabasevalueid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdTaTauuidTabasevaluesTabasevalueid(ctx, id, tauuid, tabasevalueid)
	return err
}

// PostIdTaTauuidTabasevaluesTabasevalueid converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdTaTauuidTabasevaluesTabasevalueid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tauuid" -------------
	var tauuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, ctx.Param("tauuid"), &tauuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tauuid: %s", err))
	}

	// ------------- Path parameter "tabasevalueid" -------------
	var tabasevalueid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "tabasevalueid", runtime.ParamLocationPath, ctx.Param("tabasevalueid"), &tabasevalueid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tabasevalueid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdTaTauuidTabasevaluesTabasevalueid(ctx, id, tauuid, tabasevalueid)
	return err
}

// GetIdTaTauuidTareports converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdTaTauuidTareports(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tauuid" -------------
	var tauuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, ctx.Param("tauuid"), &tauuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tauuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdTaTauuidTareports(ctx, id, tauuid)
	return err
}

// DeleteIdTaTauuidTareportsTareportid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdTaTauuidTareportsTareportid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tauuid" -------------
	var tauuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, ctx.Param("tauuid"), &tauuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tauuid: %s", err))
	}

	// ------------- Path parameter "tareportid" -------------
	var tareportid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "tareportid", runtime.ParamLocationPath, ctx.Param("tareportid"), &tareportid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tareportid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdTaTauuidTareportsTareportid(ctx, id, tauuid, tareportid)
	return err
}

// GetIdTaTauuidTareportsTareportid converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdTaTauuidTareportsTareportid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "tauuid" -------------
	var tauuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tauuid", runtime.ParamLocationPath, ctx.Param("tauuid"), &tauuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tauuid: %s", err))
	}

	// ------------- Path parameter "tareportid" -------------
	var tareportid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "tareportid", runtime.ParamLocationPath, ctx.Param("tareportid"), &tareportid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tareportid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdTaTauuidTareportsTareportid(ctx, id, tauuid, tareportid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Get)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/login", wrapper.GetLogin)
	router.GET(baseURL+"/version", wrapper.GetVersion)
	router.GET(baseURL+"/:from/:to", wrapper.GetFromTo)
	router.DELETE(baseURL+"/:id", wrapper.DeleteId)
	router.GET(baseURL+"/:id", wrapper.GetId)
	router.POST(baseURL+"/:id", wrapper.PostId)
	router.GET(baseURL+"/:id/basevalues", wrapper.GetIdBasevalues)
	router.DELETE(baseURL+"/:id/basevalues/:basevalueid", wrapper.DeleteIdBasevaluesBasevalueid)
	router.GET(baseURL+"/:id/basevalues/:basevalueid", wrapper.GetIdBasevaluesBasevalueid)
	router.POST(baseURL+"/:id/basevalues/:basevalueid", wrapper.PostIdBasevaluesBasevalueid)
	router.GET(baseURL+"/:id/container/status", wrapper.GetIdContainerStatus)
	router.GET(baseURL+"/:id/device/status", wrapper.GetIdDeviceStatus)
	router.GET(baseURL+"/:id/newbasevalue", wrapper.GetIdNewbasevalue)
	router.POST(baseURL+"/:id/newbasevalue", wrapper.PostIdNewbasevalue)
	router.GET(baseURL+"/:id/reports", wrapper.GetIdReports)
	router.DELETE(baseURL+"/:id/reports/:reportid", wrapper.DeleteIdReportsReportid)
	router.GET(baseURL+"/:id/reports/:reportid", wrapper.GetIdReportsReportid)
	router.GET(baseURL+"/:id/ta/:tauuid/newtabasevalue", wrapper.GetIdTaTauuidNewtabasevalue)
	router.POST(baseURL+"/:id/ta/:tauuid/newtabasevalue", wrapper.PostIdTaTauuidNewtabasevalue)
	router.GET(baseURL+"/:id/ta/:tauuid/status", wrapper.GetIdTaTauuidStatus)
	router.GET(baseURL+"/:id/ta/:tauuid/tabasevalues", wrapper.GetIdTaTauuidTabasevalues)
	router.DELETE(baseURL+"/:id/ta/:tauuid/tabasevalues/:tabasevalueid", wrapper.DeleteIdTaTauuidTabasevaluesTabasevalueid)
	router.GET(baseURL+"/:id/ta/:tauuid/tabasevalues/:tabasevalueid", wrapper.GetIdTaTauuidTabasevaluesTabasevalueid)
	router.POST(baseURL+"/:id/ta/:tauuid/tabasevalues/:tabasevalueid", wrapper.PostIdTaTauuidTabasevaluesTabasevalueid)
	router.GET(baseURL+"/:id/ta/:tauuid/tareports", wrapper.GetIdTaTauuidTareports)
	router.DELETE(baseURL+"/:id/ta/:tauuid/tareports/:tareportid", wrapper.DeleteIdTaTauuidTareportsTareportid)
	router.GET(baseURL+"/:id/ta/:tauuid/tareports/:tareportid", wrapper.GetIdTaTauuidTareportsTareportid)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbX2/bNhD/KgQ3oC+elWZbgektbbchW9cVideXIBho6Syzk0iVpJJlhr/7QFJ/bUqW",
	"HMVx07y0Dv/c8e73492RtFc44EnKGTAlsb/CMlhCQszH10TCRxJncM4WXDekgqcgFAXTPScS1F0K+rP9",
	"H0slKIvweoLnlEtnRxBTYIqGunPBRUIU9jFl6tUPeFKMpkxBBMIMF0AUKJq41QAj8xjCWt+c8xgI0529",
	"ldCEOKUz0qI2DYSzPcto6OhYT7CAzxkVeqVXel01P+SzJpU/G1bnq7A6c7/aFVfWX5dG8fknCJReygWk",
	"XKgW5CiXMY/c+HQ7fIhP21SkgWjr+pxxBaGzS9KIEZUJ97qUyGQ+M4QFyWKF/QWJJUwcxLghMQ1Jz+FO",
	"8Or4VNKqZZSW1NddWj4pESj95ILwEsQNCDeE/XGQJFM8S/UK+3mHs5iynmMFRFQqEH09LyBqpdYACF2Y",
	"FKIbiyqtqUPTcInL8TOyI/QdYxBrDVYtQckQNwOaG7hXyHLFqUpqd4Caka4QNVYYGhQXujzVP2DkLujp",
	"VJcn3RHFSt12pY6NEGSCqrtLnbytA6UJHkmk/l4qldp1y0DQVFHOsI91K5oTSQNEMrXUwAZE9yHFkYCE",
	"K0BEKZDKtlp5Op4ZHdpgPblyulFj1lIo5lrw6bZq2z5Q7SLmt8YwPY0L+p/pf8ND2Gr8S8T5enzPi3lA",
	"4iWXyv/x5KdXXmOgsYan1mECSOhbdRL75s9cO9Js1kyjnOnkeyuoAj/gbEEj7OOEh3RxhwSRyLZlopBu",
	"R1ZC86GKiAhUIb0xSRrS8n+g0wozwCBfcMG6eq2bih3ddPrvGUuBRZcQvGv3M0oFv6EhSHTx8+VskcXo",
	"7MO51NAkhJEIkFoCMoxEwmxeiQgLkTam6tEiM4n4Ip8UNu2VUzzBMQ2ASQOdjVv4jywm7MPlu+9Opyd6",
	"WzSst6OnAZdBPOUimgbMKyacGo9RFcOGlRfWyrOaldoqbVJFK70g66CX05dTI4unwEhKsY+/n55MX+q0",
	"TdTScMTT/0Sgtt2r7SMoplJpw+eCwoKyyDAHLbhAJI4L+7FRYeE+D7GPfwVlspZMOZOWjKcnJyYKcqaA",
	"GXUkTeN8q3ifpNZZ1OqmHFCQmInfClhgH3/jVVW9l5f0Xq2eqJhDhCB3lkrwr/LSmNDRZa8nG94SoDLB",
	"ejtsbUR4xY7rgECzMMiEAKaa+0orEcTp+zdW7D0R2A71bf7cHLnlHZkFAUiJci8Zm1y2mKkplw5f5IGG",
	"IAa3/RzxgctuT7jXWES0JbSrqmco7F+tHCniaiNUXq+vDeQxj6z7nIibXkQkIoiECWUok2ZTb0H8zogZ",
	"YpdVnBOvDBI9mZeP1/brZgFSIR1RHCv7mIs+WvaR0ppqivbJaiF4svZWiq93BEWZQkAXNCg3ew7yC5RX",
	"iVtO+UXwZMZN4BUkAWWS59UKa1tMMC6qTR/rVeB6WaVEBpOavTtrxPXEKVjxe4q9/rpCeg1ni+8LafEt",
	"+ELDtWVIDMVJtD7ftqMtMVv8eGsGnoe96JGfDEdH0b1lWm3YMwJOem2rprsd2+mRfXUAxteOQuNTvhTe",
	"Xsa0U39ngu4Jo07PR8n5YElYBF0+2Dv565DhzYkEc/KVfdNMqV+XkHo6yuc7t8brSv7T2STN66vRM8Mu",
	"8UM2yiZItXRRw95blZ/3zCMvZNVS6WvNLhUtXleKD8MQdz0ybyzj0VNaizsPk+gcmnfu7q8FxsMEkrES",
	"7k75Q0KJkxaDcnA1ESneoxa1Wfk5VjTuAgb4877FgSY7oQyEZy8dayWCIxi8KUZf2sGHzvcPtktnIpMq",
	"N6pHNj5Dv13++R6Zfn0eL73YuMDNnytK8FkWx/ugNcEySxIi7rCPLzbv/Ro3xsW1X7kec4lMUERvgCH7",
	"+oQr8EO4oQH0Qv6tGfoMewN2678jwdwuphtwBrdlZBt8GGBwWw9HKYnAXTK8r2t5PhI8wpFAQwVJqu6a",
	"lWVrHidhmN9075e/jwZxd1rtb95902n+prfXQbuY69xTF2XnU9lOte8ujL6XOmUPPVsXuNTP1Xmbt7If",
	"RjhRW0Gtp+kc/4tc3WPWxqJaw1EdonMPHvgA3YJbfdM+fdAOEBnGOi93C9/rsFwSr4oPingrRbIsL7oU",
	"GVx2KTKk5JqRmdH2vqnrEQlnre8UvfmQehBybX4zcfTcs1tBD5KV6I9cxSnSUsE9ZQLtXRQqcu+CsB4I",
	"+pyzCxwOedJ+CP8f+Mg+VnbYIb1t525+bW+bQw9zJbD1lUFzGVApn511XgfUyVnb9XJQjur1RljQelbX",
	"8pydvuTs1PXs2EYs3br/M6RRO+QJ0sW6GZkfxxPDHhRsE3Q0L5utCD3ooaw3L1pD0TMpHv3Q1x6YRsvt",
	"ZIy30g6Kj/FMurNAf6btY7+8jnwqUGTgpXGZfTsvjCu+iENeHX9p5dZD3kLvkD6k0HLdQTtJpJv2vJNu",
	"RrYd99Fb9JoRcQTXnCMGouO45naCcsBqqut6+5kDx1VAPei9+S7xg0un2q15+ZtXS5X2n132+kGi/eEj",
	"Xl+v/w8AAP//qDNYZJpDAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

