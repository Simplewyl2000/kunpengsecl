// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Servermgt_authScopes = "servermgt_auth.Scopes"
)

// Defines values for MeasurementType.
const (
	MeasurementTypeBios MeasurementType = "bios"

	MeasurementTypeIma MeasurementType = "ima"
)

// ConfigItem defines model for ConfigItem.
type ConfigItem struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ContainerBaseValue defines model for ContainerBaseValue.
type ContainerBaseValue struct {
	Measurements *[]Measurement `json:"measurements,omitempty"`
}

// ContainerBriefInfo defines model for ContainerBriefInfo.
type ContainerBriefInfo struct {
	Registered *bool   `json:"registered,omitempty"`
	Serverid   *int64  `json:"serverid,omitempty"`
	Uuid       *string `json:"uuid,omitempty"`
}

// DeviceBaseValue defines model for DeviceBaseValue.
type DeviceBaseValue struct {
	Measurements *[]Measurement `json:"measurements,omitempty"`
}

// DeviceBriefInfo defines model for DeviceBriefInfo.
type DeviceBriefInfo struct {
	Id         *int64 `json:"id,omitempty"`
	Registered *bool  `json:"registered,omitempty"`
	Serverid   *int64 `json:"serverid,omitempty"`
}

// Measurement defines model for Measurement.
type Measurement struct {
	Name  *string          `json:"name,omitempty"`
	Type  *MeasurementType `json:"type,omitempty"`
	Value *string          `json:"value,omitempty"`
}

// MeasurementType defines model for Measurement.Type.
type MeasurementType string

// PcrValue defines model for PcrValue.
type PcrValue struct {
	Index *int    `json:"index,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ServerBaseValue defines model for ServerBaseValue.
type ServerBaseValue struct {
	Measurements *[]Measurement `json:"measurements,omitempty"`
	Pcrvalues    *[]PcrValue    `json:"pcrvalues,omitempty"`
}

// ServerRegistryStatus defines model for ServerRegistryStatus.
type ServerRegistryStatus struct {
	Clientids  *[]int64 `json:"clientids,omitempty"`
	Registered *bool    `json:"registered,omitempty"`
}

// PostConfigJSONBody defines parameters for PostConfig.
type PostConfigJSONBody []ConfigItem

// PutContainerBasevalueUuidJSONBody defines parameters for PutContainerBasevalueUuid.
type PutContainerBasevalueUuidJSONBody ContainerBaseValue

// PostContainerUuidJSONBody defines parameters for PostContainerUuid.
type PostContainerUuidJSONBody ContainerBriefInfo

// PutContainerUuidJSONBody defines parameters for PutContainerUuid.
type PutContainerUuidJSONBody interface{}

// PutDeviceBasevalueIdJSONBody defines parameters for PutDeviceBasevalueId.
type PutDeviceBasevalueIdJSONBody DeviceBaseValue

// PostDeviceIdJSONBody defines parameters for PostDeviceId.
type PostDeviceIdJSONBody DeviceBriefInfo

// PutDeviceIdJSONBody defines parameters for PutDeviceId.
type PutDeviceIdJSONBody interface{}

// PutServerJSONBody defines parameters for PutServer.
type PutServerJSONBody ServerRegistryStatus

// PutServerBasevalueServerIdJSONBody defines parameters for PutServerBasevalueServerId.
type PutServerBasevalueServerIdJSONBody ServerBaseValue

// PostConfigJSONRequestBody defines body for PostConfig for application/json ContentType.
type PostConfigJSONRequestBody PostConfigJSONBody

// PutContainerBasevalueUuidJSONRequestBody defines body for PutContainerBasevalueUuid for application/json ContentType.
type PutContainerBasevalueUuidJSONRequestBody PutContainerBasevalueUuidJSONBody

// PostContainerUuidJSONRequestBody defines body for PostContainerUuid for application/json ContentType.
type PostContainerUuidJSONRequestBody PostContainerUuidJSONBody

// PutContainerUuidJSONRequestBody defines body for PutContainerUuid for application/json ContentType.
type PutContainerUuidJSONRequestBody PutContainerUuidJSONBody

// PutDeviceBasevalueIdJSONRequestBody defines body for PutDeviceBasevalueId for application/json ContentType.
type PutDeviceBasevalueIdJSONRequestBody PutDeviceBasevalueIdJSONBody

// PostDeviceIdJSONRequestBody defines body for PostDeviceId for application/json ContentType.
type PostDeviceIdJSONRequestBody PostDeviceIdJSONBody

// PutDeviceIdJSONRequestBody defines body for PutDeviceId for application/json ContentType.
type PutDeviceIdJSONRequestBody PutDeviceIdJSONBody

// PutServerJSONRequestBody defines body for PutServer for application/json ContentType.
type PutServerJSONRequestBody PutServerJSONBody

// PutServerBasevalueServerIdJSONRequestBody defines body for PutServerBasevalueServerId for application/json ContentType.
type PutServerBasevalueServerIdJSONRequestBody PutServerBasevalueServerIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfig request
	GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfig request  with any body
	PostConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConfig(ctx context.Context, body PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContainerBasevalueUuid request
	GetContainerBasevalueUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutContainerBasevalueUuid request  with any body
	PutContainerBasevalueUuidWithBody(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContainerBasevalueUuid(ctx context.Context, uuid string, body PutContainerBasevalueUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContainerStatus request
	GetContainerStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContainerStatusUuid request
	GetContainerStatusUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContainerUuid request
	GetContainerUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContainerUuid request  with any body
	PostContainerUuidWithBody(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContainerUuid(ctx context.Context, uuid string, body PostContainerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutContainerUuid request  with any body
	PutContainerUuidWithBody(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContainerUuid(ctx context.Context, uuid string, body PutContainerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeviceBasevalueId request
	GetDeviceBasevalueId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDeviceBasevalueId request  with any body
	PutDeviceBasevalueIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDeviceBasevalueId(ctx context.Context, id int64, body PutDeviceBasevalueIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeviceStatus request
	GetDeviceStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeviceStatusId request
	GetDeviceStatusId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeviceId request
	GetDeviceId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeviceId request  with any body
	PostDeviceIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeviceId(ctx context.Context, id int64, body PostDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDeviceId request  with any body
	PutDeviceIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDeviceId(ctx context.Context, id int64, body PutDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportServerId request
	GetReportServerId(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServer request
	GetServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServer request  with any body
	PutServerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServer(ctx context.Context, body PutServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServerBasevalueServerId request
	GetServerBasevalueServerId(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServerBasevalueServerId request  with any body
	PutServerBasevalueServerIdWithBody(ctx context.Context, serverId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServerBasevalueServerId(ctx context.Context, serverId int64, body PutServerBasevalueServerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusServerId request
	GetStatusServerId(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfig(ctx context.Context, body PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContainerBasevalueUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContainerBasevalueUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContainerBasevalueUuidWithBody(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContainerBasevalueUuidRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContainerBasevalueUuid(ctx context.Context, uuid string, body PutContainerBasevalueUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContainerBasevalueUuidRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContainerStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContainerStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContainerStatusUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContainerStatusUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContainerUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContainerUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContainerUuidWithBody(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContainerUuidRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContainerUuid(ctx context.Context, uuid string, body PostContainerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContainerUuidRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContainerUuidWithBody(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContainerUuidRequestWithBody(c.Server, uuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContainerUuid(ctx context.Context, uuid string, body PutContainerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContainerUuidRequest(c.Server, uuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeviceBasevalueId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeviceBasevalueIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDeviceBasevalueIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDeviceBasevalueIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDeviceBasevalueId(ctx context.Context, id int64, body PutDeviceBasevalueIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDeviceBasevalueIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeviceStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeviceStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeviceStatusId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeviceStatusIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeviceId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeviceIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeviceIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeviceIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeviceId(ctx context.Context, id int64, body PostDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeviceIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDeviceIdWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDeviceIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDeviceId(ctx context.Context, id int64, body PutDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDeviceIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportServerId(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportServerIdRequest(c.Server, serverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServer(ctx context.Context, body PutServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerBasevalueServerId(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerBasevalueServerIdRequest(c.Server, serverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServerBasevalueServerIdWithBody(ctx context.Context, serverId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServerBasevalueServerIdRequestWithBody(c.Server, serverId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServerBasevalueServerId(ctx context.Context, serverId int64, body PutServerBasevalueServerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServerBasevalueServerIdRequest(c.Server, serverId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusServerId(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusServerIdRequest(c.Server, serverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConfigRequest calls the generic PostConfig builder with application/json body
func NewPostConfigRequest(server string, body PostConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewPostConfigRequestWithBody generates requests for PostConfig with any type of body
func NewPostConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContainerBasevalueUuidRequest generates requests for GetContainerBasevalueUuid
func NewGetContainerBasevalueUuidRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container/basevalue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutContainerBasevalueUuidRequest calls the generic PutContainerBasevalueUuid builder with application/json body
func NewPutContainerBasevalueUuidRequest(server string, uuid string, body PutContainerBasevalueUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutContainerBasevalueUuidRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutContainerBasevalueUuidRequestWithBody generates requests for PutContainerBasevalueUuid with any type of body
func NewPutContainerBasevalueUuidRequestWithBody(server string, uuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container/basevalue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContainerStatusRequest generates requests for GetContainerStatus
func NewGetContainerStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container/status")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContainerStatusUuidRequest generates requests for GetContainerStatusUuid
func NewGetContainerStatusUuidRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContainerUuidRequest generates requests for GetContainerUuid
func NewGetContainerUuidRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContainerUuidRequest calls the generic PostContainerUuid builder with application/json body
func NewPostContainerUuidRequest(server string, uuid string, body PostContainerUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContainerUuidRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPostContainerUuidRequestWithBody generates requests for PostContainerUuid with any type of body
func NewPostContainerUuidRequestWithBody(server string, uuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutContainerUuidRequest calls the generic PutContainerUuid builder with application/json body
func NewPutContainerUuidRequest(server string, uuid string, body PutContainerUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutContainerUuidRequestWithBody(server, uuid, "application/json", bodyReader)
}

// NewPutContainerUuidRequestWithBody generates requests for PutContainerUuid with any type of body
func NewPutContainerUuidRequestWithBody(server string, uuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/container/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeviceBasevalueIdRequest generates requests for GetDeviceBasevalueId
func NewGetDeviceBasevalueIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device/basevalue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutDeviceBasevalueIdRequest calls the generic PutDeviceBasevalueId builder with application/json body
func NewPutDeviceBasevalueIdRequest(server string, id int64, body PutDeviceBasevalueIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDeviceBasevalueIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutDeviceBasevalueIdRequestWithBody generates requests for PutDeviceBasevalueId with any type of body
func NewPutDeviceBasevalueIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device/basevalue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeviceStatusRequest generates requests for GetDeviceStatus
func NewGetDeviceStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device/status")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeviceStatusIdRequest generates requests for GetDeviceStatusId
func NewGetDeviceStatusIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeviceIdRequest generates requests for GetDeviceId
func NewGetDeviceIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDeviceIdRequest calls the generic PostDeviceId builder with application/json body
func NewPostDeviceIdRequest(server string, id int64, body PostDeviceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeviceIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostDeviceIdRequestWithBody generates requests for PostDeviceId with any type of body
func NewPostDeviceIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutDeviceIdRequest calls the generic PutDeviceId builder with application/json body
func NewPutDeviceIdRequest(server string, id int64, body PutDeviceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDeviceIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutDeviceIdRequestWithBody generates requests for PutDeviceId with any type of body
func NewPutDeviceIdRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/device/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReportServerIdRequest generates requests for GetReportServerId
func NewGetReportServerIdRequest(server string, serverId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serverId", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/report/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServerRequest generates requests for GetServer
func NewGetServerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutServerRequest calls the generic PutServer builder with application/json body
func NewPutServerRequest(server string, body PutServerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServerRequestWithBody(server, "application/json", bodyReader)
}

// NewPutServerRequestWithBody generates requests for PutServer with any type of body
func NewPutServerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServerBasevalueServerIdRequest generates requests for GetServerBasevalueServerId
func NewGetServerBasevalueServerIdRequest(server string, serverId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serverId", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/basevalue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutServerBasevalueServerIdRequest calls the generic PutServerBasevalueServerId builder with application/json body
func NewPutServerBasevalueServerIdRequest(server string, serverId int64, body PutServerBasevalueServerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServerBasevalueServerIdRequestWithBody(server, serverId, "application/json", bodyReader)
}

// NewPutServerBasevalueServerIdRequestWithBody generates requests for PutServerBasevalueServerId with any type of body
func NewPutServerBasevalueServerIdRequestWithBody(server string, serverId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serverId", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/server/basevalue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusServerIdRequest generates requests for GetStatusServerId
func NewGetStatusServerIdRequest(server string, serverId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serverId", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// GetConfig request
	GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error)

	// PostConfig request  with any body
	PostConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigResponse, error)

	PostConfigWithResponse(ctx context.Context, body PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigResponse, error)

	// GetContainerBasevalueUuid request
	GetContainerBasevalueUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetContainerBasevalueUuidResponse, error)

	// PutContainerBasevalueUuid request  with any body
	PutContainerBasevalueUuidWithBodyWithResponse(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContainerBasevalueUuidResponse, error)

	PutContainerBasevalueUuidWithResponse(ctx context.Context, uuid string, body PutContainerBasevalueUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContainerBasevalueUuidResponse, error)

	// GetContainerStatus request
	GetContainerStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContainerStatusResponse, error)

	// GetContainerStatusUuid request
	GetContainerStatusUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetContainerStatusUuidResponse, error)

	// GetContainerUuid request
	GetContainerUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetContainerUuidResponse, error)

	// PostContainerUuid request  with any body
	PostContainerUuidWithBodyWithResponse(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContainerUuidResponse, error)

	PostContainerUuidWithResponse(ctx context.Context, uuid string, body PostContainerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContainerUuidResponse, error)

	// PutContainerUuid request  with any body
	PutContainerUuidWithBodyWithResponse(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContainerUuidResponse, error)

	PutContainerUuidWithResponse(ctx context.Context, uuid string, body PutContainerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContainerUuidResponse, error)

	// GetDeviceBasevalueId request
	GetDeviceBasevalueIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetDeviceBasevalueIdResponse, error)

	// PutDeviceBasevalueId request  with any body
	PutDeviceBasevalueIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDeviceBasevalueIdResponse, error)

	PutDeviceBasevalueIdWithResponse(ctx context.Context, id int64, body PutDeviceBasevalueIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDeviceBasevalueIdResponse, error)

	// GetDeviceStatus request
	GetDeviceStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDeviceStatusResponse, error)

	// GetDeviceStatusId request
	GetDeviceStatusIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetDeviceStatusIdResponse, error)

	// GetDeviceId request
	GetDeviceIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetDeviceIdResponse, error)

	// PostDeviceId request  with any body
	PostDeviceIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeviceIdResponse, error)

	PostDeviceIdWithResponse(ctx context.Context, id int64, body PostDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeviceIdResponse, error)

	// PutDeviceId request  with any body
	PutDeviceIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDeviceIdResponse, error)

	PutDeviceIdWithResponse(ctx context.Context, id int64, body PutDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDeviceIdResponse, error)

	// GetReportServerId request
	GetReportServerIdWithResponse(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*GetReportServerIdResponse, error)

	// GetServer request
	GetServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerResponse, error)

	// PutServer request  with any body
	PutServerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServerResponse, error)

	PutServerWithResponse(ctx context.Context, body PutServerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServerResponse, error)

	// GetServerBasevalueServerId request
	GetServerBasevalueServerIdWithResponse(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*GetServerBasevalueServerIdResponse, error)

	// PutServerBasevalueServerId request  with any body
	PutServerBasevalueServerIdWithBodyWithResponse(ctx context.Context, serverId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServerBasevalueServerIdResponse, error)

	PutServerBasevalueServerIdWithResponse(ctx context.Context, serverId int64, body PutServerBasevalueServerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServerBasevalueServerIdResponse, error)

	// GetStatus request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// GetStatusServerId request
	GetStatusServerIdWithResponse(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*GetStatusServerIdResponse, error)

	// GetVersion request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContainerBasevalueUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetContainerBasevalueUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContainerBasevalueUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutContainerBasevalueUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutContainerBasevalueUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutContainerBasevalueUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContainerStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetContainerStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContainerStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContainerStatusUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetContainerStatusUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContainerStatusUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContainerUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetContainerUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContainerUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContainerUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostContainerUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContainerUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutContainerUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutContainerUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutContainerUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeviceBasevalueIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDeviceBasevalueIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeviceBasevalueIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDeviceBasevalueIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDeviceBasevalueIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDeviceBasevalueIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeviceStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDeviceStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeviceStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeviceStatusIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDeviceStatusIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeviceStatusIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportServerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReportServerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportServerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerBasevalueServerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServerBasevalueServerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerBasevalueServerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServerBasevalueServerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutServerBasevalueServerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServerBasevalueServerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusServerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusServerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusServerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// PostConfigWithBodyWithResponse request with arbitrary body returning *PostConfigResponse
func (c *ClientWithResponses) PostConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigResponse, error) {
	rsp, err := c.PostConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigResponse(rsp)
}

func (c *ClientWithResponses) PostConfigWithResponse(ctx context.Context, body PostConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigResponse, error) {
	rsp, err := c.PostConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigResponse(rsp)
}

// GetContainerBasevalueUuidWithResponse request returning *GetContainerBasevalueUuidResponse
func (c *ClientWithResponses) GetContainerBasevalueUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetContainerBasevalueUuidResponse, error) {
	rsp, err := c.GetContainerBasevalueUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContainerBasevalueUuidResponse(rsp)
}

// PutContainerBasevalueUuidWithBodyWithResponse request with arbitrary body returning *PutContainerBasevalueUuidResponse
func (c *ClientWithResponses) PutContainerBasevalueUuidWithBodyWithResponse(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContainerBasevalueUuidResponse, error) {
	rsp, err := c.PutContainerBasevalueUuidWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContainerBasevalueUuidResponse(rsp)
}

func (c *ClientWithResponses) PutContainerBasevalueUuidWithResponse(ctx context.Context, uuid string, body PutContainerBasevalueUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContainerBasevalueUuidResponse, error) {
	rsp, err := c.PutContainerBasevalueUuid(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContainerBasevalueUuidResponse(rsp)
}

// GetContainerStatusWithResponse request returning *GetContainerStatusResponse
func (c *ClientWithResponses) GetContainerStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContainerStatusResponse, error) {
	rsp, err := c.GetContainerStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContainerStatusResponse(rsp)
}

// GetContainerStatusUuidWithResponse request returning *GetContainerStatusUuidResponse
func (c *ClientWithResponses) GetContainerStatusUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetContainerStatusUuidResponse, error) {
	rsp, err := c.GetContainerStatusUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContainerStatusUuidResponse(rsp)
}

// GetContainerUuidWithResponse request returning *GetContainerUuidResponse
func (c *ClientWithResponses) GetContainerUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetContainerUuidResponse, error) {
	rsp, err := c.GetContainerUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContainerUuidResponse(rsp)
}

// PostContainerUuidWithBodyWithResponse request with arbitrary body returning *PostContainerUuidResponse
func (c *ClientWithResponses) PostContainerUuidWithBodyWithResponse(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContainerUuidResponse, error) {
	rsp, err := c.PostContainerUuidWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContainerUuidResponse(rsp)
}

func (c *ClientWithResponses) PostContainerUuidWithResponse(ctx context.Context, uuid string, body PostContainerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContainerUuidResponse, error) {
	rsp, err := c.PostContainerUuid(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContainerUuidResponse(rsp)
}

// PutContainerUuidWithBodyWithResponse request with arbitrary body returning *PutContainerUuidResponse
func (c *ClientWithResponses) PutContainerUuidWithBodyWithResponse(ctx context.Context, uuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContainerUuidResponse, error) {
	rsp, err := c.PutContainerUuidWithBody(ctx, uuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContainerUuidResponse(rsp)
}

func (c *ClientWithResponses) PutContainerUuidWithResponse(ctx context.Context, uuid string, body PutContainerUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContainerUuidResponse, error) {
	rsp, err := c.PutContainerUuid(ctx, uuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContainerUuidResponse(rsp)
}

// GetDeviceBasevalueIdWithResponse request returning *GetDeviceBasevalueIdResponse
func (c *ClientWithResponses) GetDeviceBasevalueIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetDeviceBasevalueIdResponse, error) {
	rsp, err := c.GetDeviceBasevalueId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeviceBasevalueIdResponse(rsp)
}

// PutDeviceBasevalueIdWithBodyWithResponse request with arbitrary body returning *PutDeviceBasevalueIdResponse
func (c *ClientWithResponses) PutDeviceBasevalueIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDeviceBasevalueIdResponse, error) {
	rsp, err := c.PutDeviceBasevalueIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDeviceBasevalueIdResponse(rsp)
}

func (c *ClientWithResponses) PutDeviceBasevalueIdWithResponse(ctx context.Context, id int64, body PutDeviceBasevalueIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDeviceBasevalueIdResponse, error) {
	rsp, err := c.PutDeviceBasevalueId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDeviceBasevalueIdResponse(rsp)
}

// GetDeviceStatusWithResponse request returning *GetDeviceStatusResponse
func (c *ClientWithResponses) GetDeviceStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDeviceStatusResponse, error) {
	rsp, err := c.GetDeviceStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeviceStatusResponse(rsp)
}

// GetDeviceStatusIdWithResponse request returning *GetDeviceStatusIdResponse
func (c *ClientWithResponses) GetDeviceStatusIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetDeviceStatusIdResponse, error) {
	rsp, err := c.GetDeviceStatusId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeviceStatusIdResponse(rsp)
}

// GetDeviceIdWithResponse request returning *GetDeviceIdResponse
func (c *ClientWithResponses) GetDeviceIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetDeviceIdResponse, error) {
	rsp, err := c.GetDeviceId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeviceIdResponse(rsp)
}

// PostDeviceIdWithBodyWithResponse request with arbitrary body returning *PostDeviceIdResponse
func (c *ClientWithResponses) PostDeviceIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeviceIdResponse, error) {
	rsp, err := c.PostDeviceIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeviceIdResponse(rsp)
}

func (c *ClientWithResponses) PostDeviceIdWithResponse(ctx context.Context, id int64, body PostDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeviceIdResponse, error) {
	rsp, err := c.PostDeviceId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeviceIdResponse(rsp)
}

// PutDeviceIdWithBodyWithResponse request with arbitrary body returning *PutDeviceIdResponse
func (c *ClientWithResponses) PutDeviceIdWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDeviceIdResponse, error) {
	rsp, err := c.PutDeviceIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDeviceIdResponse(rsp)
}

func (c *ClientWithResponses) PutDeviceIdWithResponse(ctx context.Context, id int64, body PutDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDeviceIdResponse, error) {
	rsp, err := c.PutDeviceId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDeviceIdResponse(rsp)
}

// GetReportServerIdWithResponse request returning *GetReportServerIdResponse
func (c *ClientWithResponses) GetReportServerIdWithResponse(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*GetReportServerIdResponse, error) {
	rsp, err := c.GetReportServerId(ctx, serverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportServerIdResponse(rsp)
}

// GetServerWithResponse request returning *GetServerResponse
func (c *ClientWithResponses) GetServerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServerResponse, error) {
	rsp, err := c.GetServer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerResponse(rsp)
}

// PutServerWithBodyWithResponse request with arbitrary body returning *PutServerResponse
func (c *ClientWithResponses) PutServerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServerResponse, error) {
	rsp, err := c.PutServerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServerResponse(rsp)
}

func (c *ClientWithResponses) PutServerWithResponse(ctx context.Context, body PutServerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServerResponse, error) {
	rsp, err := c.PutServer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServerResponse(rsp)
}

// GetServerBasevalueServerIdWithResponse request returning *GetServerBasevalueServerIdResponse
func (c *ClientWithResponses) GetServerBasevalueServerIdWithResponse(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*GetServerBasevalueServerIdResponse, error) {
	rsp, err := c.GetServerBasevalueServerId(ctx, serverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerBasevalueServerIdResponse(rsp)
}

// PutServerBasevalueServerIdWithBodyWithResponse request with arbitrary body returning *PutServerBasevalueServerIdResponse
func (c *ClientWithResponses) PutServerBasevalueServerIdWithBodyWithResponse(ctx context.Context, serverId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServerBasevalueServerIdResponse, error) {
	rsp, err := c.PutServerBasevalueServerIdWithBody(ctx, serverId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServerBasevalueServerIdResponse(rsp)
}

func (c *ClientWithResponses) PutServerBasevalueServerIdWithResponse(ctx context.Context, serverId int64, body PutServerBasevalueServerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServerBasevalueServerIdResponse, error) {
	rsp, err := c.PutServerBasevalueServerId(ctx, serverId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServerBasevalueServerIdResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// GetStatusServerIdWithResponse request returning *GetStatusServerIdResponse
func (c *ClientWithResponses) GetStatusServerIdWithResponse(ctx context.Context, serverId int64, reqEditors ...RequestEditorFn) (*GetStatusServerIdResponse, error) {
	rsp, err := c.GetStatusServerId(ctx, serverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusServerIdResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostConfigResponse parses an HTTP response from a PostConfigWithResponse call
func ParsePostConfigResponse(rsp *http.Response) (*PostConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetContainerBasevalueUuidResponse parses an HTTP response from a GetContainerBasevalueUuidWithResponse call
func ParseGetContainerBasevalueUuidResponse(rsp *http.Response) (*GetContainerBasevalueUuidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetContainerBasevalueUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutContainerBasevalueUuidResponse parses an HTTP response from a PutContainerBasevalueUuidWithResponse call
func ParsePutContainerBasevalueUuidResponse(rsp *http.Response) (*PutContainerBasevalueUuidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutContainerBasevalueUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetContainerStatusResponse parses an HTTP response from a GetContainerStatusWithResponse call
func ParseGetContainerStatusResponse(rsp *http.Response) (*GetContainerStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetContainerStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetContainerStatusUuidResponse parses an HTTP response from a GetContainerStatusUuidWithResponse call
func ParseGetContainerStatusUuidResponse(rsp *http.Response) (*GetContainerStatusUuidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetContainerStatusUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetContainerUuidResponse parses an HTTP response from a GetContainerUuidWithResponse call
func ParseGetContainerUuidResponse(rsp *http.Response) (*GetContainerUuidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetContainerUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostContainerUuidResponse parses an HTTP response from a PostContainerUuidWithResponse call
func ParsePostContainerUuidResponse(rsp *http.Response) (*PostContainerUuidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostContainerUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutContainerUuidResponse parses an HTTP response from a PutContainerUuidWithResponse call
func ParsePutContainerUuidResponse(rsp *http.Response) (*PutContainerUuidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutContainerUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDeviceBasevalueIdResponse parses an HTTP response from a GetDeviceBasevalueIdWithResponse call
func ParseGetDeviceBasevalueIdResponse(rsp *http.Response) (*GetDeviceBasevalueIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDeviceBasevalueIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutDeviceBasevalueIdResponse parses an HTTP response from a PutDeviceBasevalueIdWithResponse call
func ParsePutDeviceBasevalueIdResponse(rsp *http.Response) (*PutDeviceBasevalueIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutDeviceBasevalueIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDeviceStatusResponse parses an HTTP response from a GetDeviceStatusWithResponse call
func ParseGetDeviceStatusResponse(rsp *http.Response) (*GetDeviceStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDeviceStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDeviceStatusIdResponse parses an HTTP response from a GetDeviceStatusIdWithResponse call
func ParseGetDeviceStatusIdResponse(rsp *http.Response) (*GetDeviceStatusIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDeviceStatusIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDeviceIdResponse parses an HTTP response from a GetDeviceIdWithResponse call
func ParseGetDeviceIdResponse(rsp *http.Response) (*GetDeviceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostDeviceIdResponse parses an HTTP response from a PostDeviceIdWithResponse call
func ParsePostDeviceIdResponse(rsp *http.Response) (*PostDeviceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutDeviceIdResponse parses an HTTP response from a PutDeviceIdWithResponse call
func ParsePutDeviceIdResponse(rsp *http.Response) (*PutDeviceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetReportServerIdResponse parses an HTTP response from a GetReportServerIdWithResponse call
func ParseGetReportServerIdResponse(rsp *http.Response) (*GetReportServerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReportServerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServerResponse parses an HTTP response from a GetServerWithResponse call
func ParseGetServerResponse(rsp *http.Response) (*GetServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutServerResponse parses an HTTP response from a PutServerWithResponse call
func ParsePutServerResponse(rsp *http.Response) (*PutServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServerBasevalueServerIdResponse parses an HTTP response from a GetServerBasevalueServerIdWithResponse call
func ParseGetServerBasevalueServerIdResponse(rsp *http.Response) (*GetServerBasevalueServerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServerBasevalueServerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePutServerBasevalueServerIdResponse parses an HTTP response from a PutServerBasevalueServerIdWithResponse call
func ParsePutServerBasevalueServerIdResponse(rsp *http.Response) (*PutServerBasevalueServerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutServerBasevalueServerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStatusServerIdResponse parses an HTTP response from a GetStatusServerIdWithResponse call
func ParseGetStatusServerIdResponse(rsp *http.Response) (*GetStatusServerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStatusServerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// return a demo html page
	// (GET /)
	Get(ctx echo.Context) error
	// Return a list of all config items in key:value pair format
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Create a list of config items
	// (POST /config)
	PostConfig(ctx echo.Context) error
	// Return the base value of a given container
	// (GET /container/basevalue/{uuid})
	GetContainerBasevalueUuid(ctx echo.Context, uuid string) error
	// create/update the base value of the given container
	// (PUT /container/basevalue/{uuid})
	PutContainerBasevalueUuid(ctx echo.Context, uuid string) error
	// Return a list of trust status for all containers
	// (GET /container/status)
	GetContainerStatus(ctx echo.Context) error
	// Return a trust status for given container
	// (GET /container/status/{uuid})
	GetContainerStatusUuid(ctx echo.Context, uuid string) error
	// Return briefing info for the given container
	// (GET /container/{uuid})
	GetContainerUuid(ctx echo.Context, uuid string) error
	// create info for a container
	// (POST /container/{uuid})
	PostContainerUuid(ctx echo.Context, uuid string) error
	// put a container into given status
	// (PUT /container/{uuid})
	PutContainerUuid(ctx echo.Context, uuid string) error
	// Return the base value of a given device
	// (GET /device/basevalue/{id})
	GetDeviceBasevalueId(ctx echo.Context, id int64) error
	// create/update the base value of the given device
	// (PUT /device/basevalue/{id})
	PutDeviceBasevalueId(ctx echo.Context, id int64) error
	// Return a list of trust status for all devices
	// (GET /device/status)
	GetDeviceStatus(ctx echo.Context) error
	// Return a trust status for given device
	// (GET /device/status/{id})
	GetDeviceStatusId(ctx echo.Context, id int64) error
	// Return briefing info for the given device
	// (GET /device/{id})
	GetDeviceId(ctx echo.Context, id int64) error
	// create info for a device
	// (POST /device/{id})
	PostDeviceId(ctx echo.Context, id int64) error
	// put a device into given status
	// (PUT /device/{id})
	PutDeviceId(ctx echo.Context, id int64) error
	// Return the trust report for the given server
	// (GET /report/{serverId})
	GetReportServerId(ctx echo.Context, serverId int64) error
	// Return a list of briefing info for all servers
	// (GET /server)
	GetServer(ctx echo.Context) error
	// put a list of servers into given status
	// (PUT /server)
	PutServer(ctx echo.Context) error
	// Return the base value of a given server
	// (GET /server/basevalue/{serverId})
	GetServerBasevalueServerId(ctx echo.Context, serverId int64) error
	// create/update the base value of the given server
	// (PUT /server/basevalue/{serverId})
	PutServerBasevalueServerId(ctx echo.Context, serverId int64) error
	// Return a list of trust status for all servers
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Return a trust status for given server
	// (GET /status/{serverId})
	GetStatusServerId(ctx echo.Context, serverId int64) error
	// Return the version of current API
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Servermgt_authScopes, []string{"write:config"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// GetContainerBasevalueUuid converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainerBasevalueUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContainerBasevalueUuid(ctx, uuid)
	return err
}

// PutContainerBasevalueUuid converts echo context to params.
func (w *ServerInterfaceWrapper) PutContainerBasevalueUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(Servermgt_authScopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutContainerBasevalueUuid(ctx, uuid)
	return err
}

// GetContainerStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainerStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContainerStatus(ctx)
	return err
}

// GetContainerStatusUuid converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainerStatusUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(Servermgt_authScopes, []string{"read:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContainerStatusUuid(ctx, uuid)
	return err
}

// GetContainerUuid converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainerUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContainerUuid(ctx, uuid)
	return err
}

// PostContainerUuid converts echo context to params.
func (w *ServerInterfaceWrapper) PostContainerUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(Servermgt_authScopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostContainerUuid(ctx, uuid)
	return err
}

// PutContainerUuid converts echo context to params.
func (w *ServerInterfaceWrapper) PutContainerUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(Servermgt_authScopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutContainerUuid(ctx, uuid)
	return err
}

// GetDeviceBasevalueId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeviceBasevalueId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeviceBasevalueId(ctx, id)
	return err
}

// PutDeviceBasevalueId converts echo context to params.
func (w *ServerInterfaceWrapper) PutDeviceBasevalueId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_authScopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDeviceBasevalueId(ctx, id)
	return err
}

// GetDeviceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeviceStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeviceStatus(ctx)
	return err
}

// GetDeviceStatusId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeviceStatusId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeviceStatusId(ctx, id)
	return err
}

// GetDeviceId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeviceId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeviceId(ctx, id)
	return err
}

// PostDeviceId converts echo context to params.
func (w *ServerInterfaceWrapper) PostDeviceId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_authScopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDeviceId(ctx, id)
	return err
}

// PutDeviceId converts echo context to params.
func (w *ServerInterfaceWrapper) PutDeviceId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_authScopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDeviceId(ctx, id)
	return err
}

// GetReportServerId converts echo context to params.
func (w *ServerInterfaceWrapper) GetReportServerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serverId" -------------
	var serverId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "serverId", runtime.ParamLocationPath, ctx.Param("serverId"), &serverId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serverId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReportServerId(ctx, serverId)
	return err
}

// GetServer converts echo context to params.
func (w *ServerInterfaceWrapper) GetServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServer(ctx)
	return err
}

// PutServer converts echo context to params.
func (w *ServerInterfaceWrapper) PutServer(ctx echo.Context) error {
	var err error

	ctx.Set(Servermgt_authScopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutServer(ctx)
	return err
}

// GetServerBasevalueServerId converts echo context to params.
func (w *ServerInterfaceWrapper) GetServerBasevalueServerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serverId" -------------
	var serverId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "serverId", runtime.ParamLocationPath, ctx.Param("serverId"), &serverId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serverId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetServerBasevalueServerId(ctx, serverId)
	return err
}

// PutServerBasevalueServerId converts echo context to params.
func (w *ServerInterfaceWrapper) PutServerBasevalueServerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serverId" -------------
	var serverId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "serverId", runtime.ParamLocationPath, ctx.Param("serverId"), &serverId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serverId: %s", err))
	}

	ctx.Set(Servermgt_authScopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutServerBasevalueServerId(ctx, serverId)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// GetStatusServerId converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusServerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serverId" -------------
	var serverId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "serverId", runtime.ParamLocationPath, ctx.Param("serverId"), &serverId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serverId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatusServerId(ctx, serverId)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Get)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.GET(baseURL+"/container/basevalue/:uuid", wrapper.GetContainerBasevalueUuid)
	router.PUT(baseURL+"/container/basevalue/:uuid", wrapper.PutContainerBasevalueUuid)
	router.GET(baseURL+"/container/status", wrapper.GetContainerStatus)
	router.GET(baseURL+"/container/status/:uuid", wrapper.GetContainerStatusUuid)
	router.GET(baseURL+"/container/:uuid", wrapper.GetContainerUuid)
	router.POST(baseURL+"/container/:uuid", wrapper.PostContainerUuid)
	router.PUT(baseURL+"/container/:uuid", wrapper.PutContainerUuid)
	router.GET(baseURL+"/device/basevalue/:id", wrapper.GetDeviceBasevalueId)
	router.PUT(baseURL+"/device/basevalue/:id", wrapper.PutDeviceBasevalueId)
	router.GET(baseURL+"/device/status", wrapper.GetDeviceStatus)
	router.GET(baseURL+"/device/status/:id", wrapper.GetDeviceStatusId)
	router.GET(baseURL+"/device/:id", wrapper.GetDeviceId)
	router.POST(baseURL+"/device/:id", wrapper.PostDeviceId)
	router.PUT(baseURL+"/device/:id", wrapper.PutDeviceId)
	router.GET(baseURL+"/report/:serverId", wrapper.GetReportServerId)
	router.GET(baseURL+"/server", wrapper.GetServer)
	router.PUT(baseURL+"/server", wrapper.PutServer)
	router.GET(baseURL+"/server/basevalue/:serverId", wrapper.GetServerBasevalueServerId)
	router.PUT(baseURL+"/server/basevalue/:serverId", wrapper.PutServerBasevalueServerId)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.GET(baseURL+"/status/:serverId", wrapper.GetStatusServerId)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xaW2/bRhP9K4v9vkfWVJI2QPnmuEWgXg0ryYthFCtyJG1M7jJ7caIa/u/FXngTKZG6",
	"28lDLJF7mTkzc+YsxUf8gxYpjvBCqVxGYZjymKQLLhUO8ATEAwiJI6bTNMAxz3LOgCmJo0cs4wVkxH68",
	"4mxG52MFmfmWC56DUBTsPUYyMH/VMgccYakEZXP8FOAHkuquO09BcYVPP0OszNgrzhShDMQ7IuFTMbG5",
	"UQZEagFZYR9VkNkP/xcwwxH+X1jZH3rjwz+rSbjamAhBln2WCAqzMZvxtiUC5lQqEJCYbwnMiE4VjmYk",
	"lVAuOeU8BcLMmtLCTO3oGRcZUTjClKm3P+JyOGUK5iDMcK3d0AG4/QIPNIazg+bNWI/YYN+PCm2X6XVf",
	"h+e2u1AzENOM4AAD0xmObvGUcokDe/Eu2K80rmOxJraUJfDNBpl8o5nZ+PWbAGeUuS+jLny32dmxw0mT",
	"K8B5LKyNwxcsARqUqs6pG5tmYjlRRGnZ9ixOKTBFk6YVA/J31Z3t8rltsE3xWAuqlhPjrzPPZX02V/8Q",
	"rRbWtJR/tbfMBS7ov0RRzq54Aq2LH8t2UO8G0U+jn9+GjYE4wDLmecF5JIlk0S/sV+S+IsocMJQzk/Rf",
	"BVUQxbZl4AhnPKGzJRJEIndNi2J1N7Ja1A9VRMxBFas3JkmLMb+HjV7YAQ00jV+v8ZO5RD1BJSBjQXNr",
	"SoR/1ywHNp9A/AcSkHEFiCgFUtltC1tywR9oAhLd/Dr5MNMpurweS6Q4yggjc0BqAUgJLRUSkHOhJCIs",
	"QcaZ6o60KYf4zE9Kmv7KC5NXVKWwYtWNs+qyZpWxwk/DATaTnTOvLkYXI4MUz4GRnOIIv7kYXbzCAc6J",
	"Wth4hua/OVjSM5lvVxwnOMLvwUgDATLnTNr0eT0a2aLgTHmaVPBNhQuVpU46PAUrcF6iBDKOzAiUkznY",
	"YBRLlnpD6iwjYmnTSWnBEOmaFhaptN5ep096rSZ5ntLYzgw/S2NooXIGk01NCbXppgOG3yZ//4XsfRNx",
	"5wlyO/VAclNAklKpzGSSpo0FEGXoHpaRpUuUEyqQJyhDo0bgtaC65rKO1RcNUr3jyfLcODXcUhxNAcUC",
	"iIIEcYF0npiPuIlXGeDmUu/pA7AmTn6pBpni6LZNo7dN7rp7uqsH5MouUwtIK5omU514DKdEgg1M+Gjk",
	"3FNP9lbi1076aBSgKVZBMlCWHG9Nv8eRLWAceGXipKILJbU9RgkNQS1Yq23+br8a6Qn5qobvCLUhQgMO",
	"cmlr2XhYJazMNBWB5kW03c4283VX4uvTo7xbdR0FYV9TEpShiC7U+gurDf/KMlWdDq2zovOvFJqr19At",
	"1xF2c6XlQrP8ZKnreovOS8DT9A635QcjBPy+u3URj3hdUWzdTxpyxKSFbzBubdkN6TZ05jx8tlxWnd00",
	"u2f8K6ud3zRj9+6KZhYnMKYVn9pHuo4qXBF765K2HbHNldPQ4SuFU4a4FdqectkiqC+8NZWPKDpC9mEB",
	"tdqamqGUzbdpUY05FvjOsPfIs5MAfczutAnkCmCamCP2jEKCpktkvPBtqnZm3k7y+YXr8w/Siqpwki21",
	"xrMM4pbPJHaKYa4Vokxxn/yybHa7hlMsCz47lMwwJtbi2WWuYcnEPtusC/oeqqyeydrx42EJ0BP+/meb",
	"R6TP1afMJ5L1DvlNdXZOqA9PoLvB3KntK+h2F/ZujTOo+sL4WvX163kH3unEvNtvTyXvIT68jHcLyw4M",
	"B9KX8+mFcNdmJV9cObySd8B+Mf8Gh22NNO/I+WGB+n7aS58098VyaF1e6zJrRfkZoD5ae9kEs4e4qer2",
	"1OV+zaOK8qFK4QVEcG9xvjmGe+vyRjiPJcoLH7oVufttLXx0S4w3s+SNHTzxQweFX1aDnyljOnes+HD+",
	"dYsN/6tl/RfJLUR5fdoKZ/rfHG00/OcNIZgUv1AeXZT5NxYqitteknnMdukylSZr9xsjyoqU30BTNagO",
	"3wA6X33ogMTbuUIh5SsRh2KSYpvjUkkRktKpbk5xt+un/EHsUr0iY2d9lzRz8nN/wS59ZXJ+2I9Vowd5",
	"BlDBuPszAM+Gp38G0OgwvYf/0x37a51392N/oy8f8thfdpgKtqFEZge/QP4619m/lqB7HPvraV6+v7U+",
	"Sp/8kP0g6/X6EnlbUO310GGMXkzkMxRrIYApdHk9tgeV/wIAAP//fZKM+IouAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

