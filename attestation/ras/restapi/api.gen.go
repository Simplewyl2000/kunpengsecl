// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Servermgt_oauth2Scopes = "servermgt_oauth2.Scopes"
)

// BaseValueInfo defines model for BaseValueInfo.
type BaseValueInfo struct {
	Bios       string `json:"bios"`
	Createtime string `json:"createtime"`
	Enabled    bool   `json:"enabled"`
	Id         int64  `json:"id"`
	Ima        string `json:"ima"`
	Name       string `json:"name"`
	Pcr        string `json:"pcr"`
}

// ReportInfo defines model for ReportInfo.
type ReportInfo struct {
	Bioslog    string `json:"bioslog"`
	Createtime string `json:"createtime"`
	Id         int64  `json:"id"`
	Imalog     string `json:"imalog"`
	Pcrlog     string `json:"pcrlog"`
	Quoted     string `json:"quoted"`
	Signature  string `json:"signature"`
	Trusted    bool   `json:"trusted"`
	Validated  bool   `json:"validated"`
}

// ServerInfo defines model for ServerInfo.
type ServerInfo struct {
	Id      int64  `json:"id"`
	Info    string `json:"info"`
	Online  bool   `json:"online"`
	Regtime string `json:"regtime"`
	Trusted bool   `json:"trusted"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfig request
	GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfig request
	PostConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLogin request
	PostLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFromTo request
	GetFromTo(ctx context.Context, from int64, to int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteId request
	DeleteId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetId request
	GetId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostId request
	PostId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdBasevalues request
	GetIdBasevalues(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdBasevalues request
	PostIdBasevalues(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdBasevaluesBasevalueid request
	DeleteIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdBasevaluesBasevalueid request
	GetIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIdBasevaluesBasevalueid request
	PostIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdReports request
	GetIdReports(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdReportsReportid request
	DeleteIdReportsReportid(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdReportsReportid request
	GetIdReportsReportid(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFromTo(ctx context.Context, from int64, to int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFromToRequest(c.Server, from, to)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdBasevalues(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdBasevaluesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdBasevalues(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdBasevaluesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdBasevaluesBasevalueidRequest(c.Server, id, basevalueid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdBasevaluesBasevalueidRequest(c.Server, id, basevalueid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIdBasevaluesBasevalueid(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIdBasevaluesBasevalueidRequest(c.Server, id, basevalueid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdReports(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdReportsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdReportsReportid(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdReportsReportidRequest(c.Server, id, reportid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdReportsReportid(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdReportsReportidRequest(c.Server, id, reportid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConfigRequest generates requests for PostConfig
func NewPostConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLoginRequest generates requests for PostLogin
func NewPostLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFromToRequest generates requests for GetFromTo
func NewGetFromToRequest(server string, from int64, to int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "from", runtime.ParamLocationPath, from)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "to", runtime.ParamLocationPath, to)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIdRequest generates requests for DeleteId
func NewDeleteIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdRequest generates requests for GetId
func NewGetIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdRequest generates requests for PostId
func NewPostIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdBasevaluesRequest generates requests for GetIdBasevalues
func NewGetIdBasevaluesRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/basevalues", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdBasevaluesRequest generates requests for PostIdBasevalues
func NewPostIdBasevaluesRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/basevalues", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIdBasevaluesBasevalueidRequest generates requests for DeleteIdBasevaluesBasevalueid
func NewDeleteIdBasevaluesBasevalueidRequest(server string, id int64, basevalueid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, basevalueid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/basevalues/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdBasevaluesBasevalueidRequest generates requests for GetIdBasevaluesBasevalueid
func NewGetIdBasevaluesBasevalueidRequest(server string, id int64, basevalueid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, basevalueid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/basevalues/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIdBasevaluesBasevalueidRequest generates requests for PostIdBasevaluesBasevalueid
func NewPostIdBasevaluesBasevalueidRequest(server string, id int64, basevalueid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, basevalueid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/basevalues/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdReportsRequest generates requests for GetIdReports
func NewGetIdReportsRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/reports", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIdReportsReportidRequest generates requests for DeleteIdReportsReportid
func NewDeleteIdReportsReportidRequest(server string, id int64, reportid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reportid", runtime.ParamLocationPath, reportid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/reports/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIdReportsReportidRequest generates requests for GetIdReportsReportid
func NewGetIdReportsReportidRequest(server string, id int64, reportid int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reportid", runtime.ParamLocationPath, reportid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/reports/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// GetConfig request
	GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error)

	// PostConfig request
	PostConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostConfigResponse, error)

	// PostLogin request
	PostLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	// GetVersion request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)

	// GetFromTo request
	GetFromToWithResponse(ctx context.Context, from int64, to int64, reqEditors ...RequestEditorFn) (*GetFromToResponse, error)

	// DeleteId request
	DeleteIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteIdResponse, error)

	// GetId request
	GetIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdResponse, error)

	// PostId request
	PostIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostIdResponse, error)

	// GetIdBasevalues request
	GetIdBasevaluesWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdBasevaluesResponse, error)

	// PostIdBasevalues request
	PostIdBasevaluesWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostIdBasevaluesResponse, error)

	// DeleteIdBasevaluesBasevalueid request
	DeleteIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*DeleteIdBasevaluesBasevalueidResponse, error)

	// GetIdBasevaluesBasevalueid request
	GetIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*GetIdBasevaluesBasevalueidResponse, error)

	// PostIdBasevaluesBasevalueid request
	PostIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*PostIdBasevaluesBasevalueidResponse, error)

	// GetIdReports request
	GetIdReportsWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdReportsResponse, error)

	// DeleteIdReportsReportid request
	DeleteIdReportsReportidWithResponse(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*DeleteIdReportsReportidResponse, error)

	// GetIdReportsReportid request
	GetIdReportsReportidWithResponse(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*GetIdReportsReportidResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ServerInfo
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFromToResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ServerInfo
}

// Status returns HTTPResponse.Status
func (r GetFromToResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFromToResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdBasevaluesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BaseValueInfo
}

// Status returns HTTPResponse.Status
func (r GetIdBasevaluesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdBasevaluesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdBasevaluesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdBasevaluesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdBasevaluesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdBasevaluesBasevalueidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdBasevaluesBasevalueidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdBasevaluesBasevalueidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdBasevaluesBasevalueidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetIdBasevaluesBasevalueidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdBasevaluesBasevalueidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIdBasevaluesBasevalueidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostIdBasevaluesBasevalueidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIdBasevaluesBasevalueidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReportInfo
}

// Status returns HTTPResponse.Status
func (r GetIdReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdReportsReportidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdReportsReportidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdReportsReportidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdReportsReportidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetIdReportsReportidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdReportsReportidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// PostConfigWithResponse request returning *PostConfigResponse
func (c *ClientWithResponses) PostConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostConfigResponse, error) {
	rsp, err := c.PostConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigResponse(rsp)
}

// PostLoginWithResponse request returning *PostLoginResponse
func (c *ClientWithResponses) PostLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// GetFromToWithResponse request returning *GetFromToResponse
func (c *ClientWithResponses) GetFromToWithResponse(ctx context.Context, from int64, to int64, reqEditors ...RequestEditorFn) (*GetFromToResponse, error) {
	rsp, err := c.GetFromTo(ctx, from, to, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFromToResponse(rsp)
}

// DeleteIdWithResponse request returning *DeleteIdResponse
func (c *ClientWithResponses) DeleteIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*DeleteIdResponse, error) {
	rsp, err := c.DeleteId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdResponse(rsp)
}

// GetIdWithResponse request returning *GetIdResponse
func (c *ClientWithResponses) GetIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdResponse, error) {
	rsp, err := c.GetId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdResponse(rsp)
}

// PostIdWithResponse request returning *PostIdResponse
func (c *ClientWithResponses) PostIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostIdResponse, error) {
	rsp, err := c.PostId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdResponse(rsp)
}

// GetIdBasevaluesWithResponse request returning *GetIdBasevaluesResponse
func (c *ClientWithResponses) GetIdBasevaluesWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdBasevaluesResponse, error) {
	rsp, err := c.GetIdBasevalues(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdBasevaluesResponse(rsp)
}

// PostIdBasevaluesWithResponse request returning *PostIdBasevaluesResponse
func (c *ClientWithResponses) PostIdBasevaluesWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*PostIdBasevaluesResponse, error) {
	rsp, err := c.PostIdBasevalues(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdBasevaluesResponse(rsp)
}

// DeleteIdBasevaluesBasevalueidWithResponse request returning *DeleteIdBasevaluesBasevalueidResponse
func (c *ClientWithResponses) DeleteIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*DeleteIdBasevaluesBasevalueidResponse, error) {
	rsp, err := c.DeleteIdBasevaluesBasevalueid(ctx, id, basevalueid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdBasevaluesBasevalueidResponse(rsp)
}

// GetIdBasevaluesBasevalueidWithResponse request returning *GetIdBasevaluesBasevalueidResponse
func (c *ClientWithResponses) GetIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*GetIdBasevaluesBasevalueidResponse, error) {
	rsp, err := c.GetIdBasevaluesBasevalueid(ctx, id, basevalueid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdBasevaluesBasevalueidResponse(rsp)
}

// PostIdBasevaluesBasevalueidWithResponse request returning *PostIdBasevaluesBasevalueidResponse
func (c *ClientWithResponses) PostIdBasevaluesBasevalueidWithResponse(ctx context.Context, id int64, basevalueid int64, reqEditors ...RequestEditorFn) (*PostIdBasevaluesBasevalueidResponse, error) {
	rsp, err := c.PostIdBasevaluesBasevalueid(ctx, id, basevalueid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIdBasevaluesBasevalueidResponse(rsp)
}

// GetIdReportsWithResponse request returning *GetIdReportsResponse
func (c *ClientWithResponses) GetIdReportsWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetIdReportsResponse, error) {
	rsp, err := c.GetIdReports(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdReportsResponse(rsp)
}

// DeleteIdReportsReportidWithResponse request returning *DeleteIdReportsReportidResponse
func (c *ClientWithResponses) DeleteIdReportsReportidWithResponse(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*DeleteIdReportsReportidResponse, error) {
	rsp, err := c.DeleteIdReportsReportid(ctx, id, reportid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdReportsReportidResponse(rsp)
}

// GetIdReportsReportidWithResponse request returning *GetIdReportsReportidResponse
func (c *ClientWithResponses) GetIdReportsReportidWithResponse(ctx context.Context, id int64, reportid int64, reqEditors ...RequestEditorFn) (*GetIdReportsReportidResponse, error) {
	rsp, err := c.GetIdReportsReportid(ctx, id, reportid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdReportsReportidResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ServerInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostConfigResponse parses an HTTP response from a PostConfigWithResponse call
func ParsePostConfigResponse(rsp *http.Response) (*PostConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostLoginResponse parses an HTTP response from a PostLoginWithResponse call
func ParsePostLoginResponse(rsp *http.Response) (*PostLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetFromToResponse parses an HTTP response from a GetFromToWithResponse call
func ParseGetFromToResponse(rsp *http.Response) (*GetFromToResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFromToResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ServerInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteIdResponse parses an HTTP response from a DeleteIdWithResponse call
func ParseDeleteIdResponse(rsp *http.Response) (*DeleteIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdResponse parses an HTTP response from a GetIdWithResponse call
func ParseGetIdResponse(rsp *http.Response) (*GetIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostIdResponse parses an HTTP response from a PostIdWithResponse call
func ParsePostIdResponse(rsp *http.Response) (*PostIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdBasevaluesResponse parses an HTTP response from a GetIdBasevaluesWithResponse call
func ParseGetIdBasevaluesResponse(rsp *http.Response) (*GetIdBasevaluesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdBasevaluesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BaseValueInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostIdBasevaluesResponse parses an HTTP response from a PostIdBasevaluesWithResponse call
func ParsePostIdBasevaluesResponse(rsp *http.Response) (*PostIdBasevaluesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdBasevaluesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteIdBasevaluesBasevalueidResponse parses an HTTP response from a DeleteIdBasevaluesBasevalueidWithResponse call
func ParseDeleteIdBasevaluesBasevalueidResponse(rsp *http.Response) (*DeleteIdBasevaluesBasevalueidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdBasevaluesBasevalueidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdBasevaluesBasevalueidResponse parses an HTTP response from a GetIdBasevaluesBasevalueidWithResponse call
func ParseGetIdBasevaluesBasevalueidResponse(rsp *http.Response) (*GetIdBasevaluesBasevalueidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdBasevaluesBasevalueidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostIdBasevaluesBasevalueidResponse parses an HTTP response from a PostIdBasevaluesBasevalueidWithResponse call
func ParsePostIdBasevaluesBasevalueidResponse(rsp *http.Response) (*PostIdBasevaluesBasevalueidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostIdBasevaluesBasevalueidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdReportsResponse parses an HTTP response from a GetIdReportsWithResponse call
func ParseGetIdReportsResponse(rsp *http.Response) (*GetIdReportsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReportInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteIdReportsReportidResponse parses an HTTP response from a DeleteIdReportsReportidWithResponse call
func ParseDeleteIdReportsReportidResponse(rsp *http.Response) (*DeleteIdReportsReportidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdReportsReportidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetIdReportsReportidResponse parses an HTTP response from a GetIdReportsReportidWithResponse call
func ParseGetIdReportsReportidResponse(rsp *http.Response) (*GetIdReportsReportidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetIdReportsReportidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	Get(ctx echo.Context) error

	// (GET /config)
	GetConfig(ctx echo.Context) error

	// (POST /config)
	PostConfig(ctx echo.Context) error

	// (POST /login)
	PostLogin(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error

	// (GET /{from}/{to})
	GetFromTo(ctx echo.Context, from int64, to int64) error

	// (DELETE /{id})
	DeleteId(ctx echo.Context, id int64) error

	// (GET /{id})
	GetId(ctx echo.Context, id int64) error

	// (POST /{id})
	PostId(ctx echo.Context, id int64) error

	// (GET /{id}/basevalues)
	GetIdBasevalues(ctx echo.Context, id int64) error

	// (POST /{id}/basevalues)
	PostIdBasevalues(ctx echo.Context, id int64) error

	// (DELETE /{id}/basevalues/{basevalueid})
	DeleteIdBasevaluesBasevalueid(ctx echo.Context, id int64, basevalueid int64) error

	// (GET /{id}/basevalues/{basevalueid})
	GetIdBasevaluesBasevalueid(ctx echo.Context, id int64, basevalueid int64) error

	// (POST /{id}/basevalues/{basevalueid})
	PostIdBasevaluesBasevalueid(ctx echo.Context, id int64, basevalueid int64) error

	// (GET /{id}/reports)
	GetIdReports(ctx echo.Context, id int64) error

	// (DELETE /{id}/reports/{reportid})
	DeleteIdReportsReportid(ctx echo.Context, id int64, reportid int64) error

	// (GET /{id}/reports/{reportid})
	GetIdReportsReportid(ctx echo.Context, id int64, reportid int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Get converts echo context to params.
func (w *ServerInterfaceWrapper) Get(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Get(ctx)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// PostConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostConfig(ctx)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// GetFromTo converts echo context to params.
func (w *ServerInterfaceWrapper) GetFromTo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "from" -------------
	var from int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "from", runtime.ParamLocationPath, ctx.Param("from"), &from)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Path parameter "to" -------------
	var to int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "to", runtime.ParamLocationPath, ctx.Param("to"), &to)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFromTo(ctx, from, to)
	return err
}

// DeleteId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteId(ctx, id)
	return err
}

// GetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetId(ctx, id)
	return err
}

// PostId converts echo context to params.
func (w *ServerInterfaceWrapper) PostId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostId(ctx, id)
	return err
}

// GetIdBasevalues converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdBasevalues(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdBasevalues(ctx, id)
	return err
}

// PostIdBasevalues converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdBasevalues(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdBasevalues(ctx, id)
	return err
}

// DeleteIdBasevaluesBasevalueid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdBasevaluesBasevalueid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "basevalueid" -------------
	var basevalueid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, ctx.Param("basevalueid"), &basevalueid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter basevalueid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdBasevaluesBasevalueid(ctx, id, basevalueid)
	return err
}

// GetIdBasevaluesBasevalueid converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdBasevaluesBasevalueid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "basevalueid" -------------
	var basevalueid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, ctx.Param("basevalueid"), &basevalueid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter basevalueid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdBasevaluesBasevalueid(ctx, id, basevalueid)
	return err
}

// PostIdBasevaluesBasevalueid converts echo context to params.
func (w *ServerInterfaceWrapper) PostIdBasevaluesBasevalueid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "basevalueid" -------------
	var basevalueid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "basevalueid", runtime.ParamLocationPath, ctx.Param("basevalueid"), &basevalueid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter basevalueid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostIdBasevaluesBasevalueid(ctx, id, basevalueid)
	return err
}

// GetIdReports converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdReports(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdReports(ctx, id)
	return err
}

// DeleteIdReportsReportid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdReportsReportid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "reportid" -------------
	var reportid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "reportid", runtime.ParamLocationPath, ctx.Param("reportid"), &reportid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reportid: %s", err))
	}

	ctx.Set(Servermgt_oauth2Scopes, []string{"write:servers"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdReportsReportid(ctx, id, reportid)
	return err
}

// GetIdReportsReportid converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdReportsReportid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "reportid" -------------
	var reportid int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "reportid", runtime.ParamLocationPath, ctx.Param("reportid"), &reportid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reportid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdReportsReportid(ctx, id, reportid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Get)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.POST(baseURL+"/config", wrapper.PostConfig)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.GET(baseURL+"/version", wrapper.GetVersion)
	router.GET(baseURL+"/:from/:to", wrapper.GetFromTo)
	router.DELETE(baseURL+"/:id", wrapper.DeleteId)
	router.GET(baseURL+"/:id", wrapper.GetId)
	router.POST(baseURL+"/:id", wrapper.PostId)
	router.GET(baseURL+"/:id/basevalues", wrapper.GetIdBasevalues)
	router.POST(baseURL+"/:id/basevalues", wrapper.PostIdBasevalues)
	router.DELETE(baseURL+"/:id/basevalues/:basevalueid", wrapper.DeleteIdBasevaluesBasevalueid)
	router.GET(baseURL+"/:id/basevalues/:basevalueid", wrapper.GetIdBasevaluesBasevalueid)
	router.POST(baseURL+"/:id/basevalues/:basevalueid", wrapper.PostIdBasevaluesBasevalueid)
	router.GET(baseURL+"/:id/reports", wrapper.GetIdReports)
	router.DELETE(baseURL+"/:id/reports/:reportid", wrapper.DeleteIdReportsReportid)
	router.GET(baseURL+"/:id/reports/:reportid", wrapper.GetIdReportsReportid)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZW2/bthf/KgT/f6AvnuVmW4Hpre0uCNYBRdL1JQgGWjqS2VGkSh6lywx994Gkbo4p",
	"W3YMN2heYoeXc/n9zk3WmiaqKJUEiYbGa2qSFRTMfX3DDHxkooJLmSm7UGpVgkYObnvJlfvE+xJoTA1q",
	"LnNaz2iigSEgLyC4DZItBaR2L4WMVQJpnDFhYNaeXSolgEl7mLtzmdIFQxpTLvHVD7Q7yCVCDtodLFhQ",
	"m2QjZpSJDqzXM6rhc8W1NfDGqt/wp7e+kezlzDwY3orbzjy1/AQJWmVXUCqN4zgKlR8D5SHojKkoEz22",
	"9blS6Ina2jI8lwwrHbYLdWVwKsV3TPCUTTy+l59eWm9G58nQ7s7zWcdAh1OIwmvQd6DDFE7nobm+hZiS",
	"gkuYBpiGfDQiDkA+BGUrujNoCKIzfhsaGw2QVJrj/bUtHh4S4+AqcvxrhVh6e0yieYlcSRpTu0qWzPCE",
	"sApXIJEnzO4RVERDoRAIQwSDftXLsww6HdYRe7lH2alxtrSKlRV8sa3arx+oNhPqi3PMXlOa/+v236oU",
	"thb/1KKxJ44ioRImVspg/OPip1fRxkHnjSo9YBpYGnt1hsbu30Y7scDb0OJK2iLzRXOEOFEy4zmNaaFS",
	"nt0TzQzxa5VupfuTvdDmKDKdA7bSNy4ZF0Tqb9jphTvgmG9jwUNd14MY3wT990qWIPNrSN6N40xKre54",
	"CoZc/XL9IasEef3+0lhqCiZZDgRXQFxAEu0qqiFMpsQ60+9YkZUhKmsupZv+mjmdUcETkMZR5xsE/aMS",
	"TL6/fvfdxXxBZ7Ta8N6fnifKJGKudD5PZNReuHCIcRTwwMsr7+XrgZfWK+tSH1bWIA/Qy/livnCloATJ",
	"Sk5j+v18MX9pCxXDlYuRyP7JAbfhtf4xIrhB6/hSc8i4zF3kkExpwoRo/adOhaf7MqUx/Q3Qpb4plTQ+",
	"GC8WC/uRKIkgnTpWlqJJleiTsTrbWcEVQITCXfy/hozG9H9RP1VEzUgRDSpoHzlMa3bvQwn+wagUjJ9c",
	"dj17gJYGrLScDFjtRERtxu2gwEZhUmkNEjfzyirRLIj9Wy/2kQxszzFjeD48uYWOqZIEjCENSs6nkC/u",
	"aqlMAIum0DAi4cs0IN4rsxuJsI1tRVvBuKphh6LxzTrQIm4elMrb+tZRLlTu4Qu76bYJM4QRlhZcksq4",
	"rN527Z0TdIhnXvUjbO9Ky8R4bc5b1OyyBoPE1qFAyH5sRD/ZmGWdN/0Vi8k606qoozWqek8pNSUkPOOQ",
	"djWiwfeFqxEhVH7VqvigXL3WrAB0PfdmTa0zroa3Dw0xtWbQ4fyFuoLZwOG9s2Q9CwpG9Uixt8+rEwyJ",
	"9gS/MJ7gNmJ4WvsYEYCwHS1+nWzL2YqQn93Jy3RSgDTT+Ml5DGfNuBNH1p/ZtNTaRDyQUl8ZrTNE/eAp",
	"6vRh3wkfn4B2hP/e5j6VSNsAn2TcJysmc9iJwtHt1xaOaMkM3DFReVsOywk7gdr7pBEQTI83vYJvJ1E2",
	"f3g8eYfYJ/6gZHnI0o68YWnaTMT9BftsO6F3+Ax6ImSHc+kA706XVdG6+35sn35hBku96aPtuyfhTa/6",
	"PHyER77lhhlff2YYA/RMo0RI997i+VyoPE+dPtVMs1f+QZU6HBiHzTmPLtzPu2Ycg+hjm0XzQ/Fx81d7",
	"OVg+rrrNb2XwGrymPPnUtVP2wSNXS8zgKb1lOlr7LycZCLyo0WGgCYGrRuHXTGnd2/DEZoAGw7P3/xHu",
	"hrn77RN3hgJxqna/W/iRvb4LvrruXg57hsffT056c9e/ITTDF6S0vq3/CwAA///rFJGAVCMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
